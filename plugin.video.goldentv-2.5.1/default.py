import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import urllib
import urllib2
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib , base64
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
oo000 = None
try :
 from xml . sax . saxutils import escape
except : traceback . print_exc ( )
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
if 9 - 9: Ii . o0o00Oo0O - iI11I1II1I1I
try :
 import ssl
 ssl . _create_default_https_context = ssl . _create_unverified_context
except :
 pass
 if 71 - 71: ii
import zipfile
if 11 - 11: ii1I - ooO0OO000o
def ii11i ( _in , _out ) :
 try :
  oOooOoO0Oo0O = zipfile . ZipFile ( _in , 'r' )
  oOooOoO0Oo0O . extractall ( _out )
 except Exception , iI1 :
  print str ( iI1 )
  return False
  if 43 - 43: I11i11Ii
 return True
 if 65 - 65: i1iIi11iIIi1I
 if 78 - 78: i11ii11iIi11i . oOoO0oo0OOOo + IiiI / Iii1ii1II11i
def iI111iI ( ) :
 print "SportsDevil"
 IiII = "http://freemediaentertainment.com/Free.Addons/plugin.video.SportsDevil-2016-08-22.zip"
 iI1Ii11111iIi = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) ) . decode ( "utf-8" )
 i1i1II = os . path . join ( iI1Ii11111iIi , 'packages' , 'spd.zip' )
 if 96 - 96: o0OO0 - Oo0ooO0oo0oO . I1i1iI1i - o00ooo0 / o00 * Oo0oO0ooo
 urllib . urlretrieve ( IiII , i1i1II )
 ii11i ( i1i1II , iI1Ii11111iIi )
 if 56 - 56: ooO00oOoo - O0OOo
 try :
  os . remove ( i1i1II )
 except :
  pass
  if 8 - 8: IiiI * Iii1ii1II11i * iI11I1II1I1I . Oo0oO0ooo / Oo0oO0ooo % Oo0oO0ooo
 xbmc . executebuiltin ( "UpdateLocalAddons" )
 xbmc . executebuiltin ( "UpdateAddonRepos" )
 if 22 - 22: o00ooo0 . Oo0oO0ooo
 if 41 - 41: ooO00oOoo . O0OOo * Oo0oO0ooo % Ii
def o000o0o00o0Oo ( ) :
 if os . path . exists ( os . path . join ( xbmc . translatePath ( "special://home/addons/" ) . decode ( "utf-8" ) , 'repository.dss' ) ) :
  return
  if 80 - 80: ii . I11i11Ii
 IiII = "http://freemediaentertainment.com/Free.Addons.zip"
 iI1Ii11111iIi = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) ) . decode ( "utf-8" )
 i1i1II = os . path . join ( iI1Ii11111iIi , 'packages' , 'isr.zip' )
 if 87 - 87: o0OO0 / O0OOo + ooO00oOoo - O0OOo . O0OOo / ooO0OO000o
 urllib . urlretrieve ( IiII , i1i1II )
 ii11i ( i1i1II , iI1Ii11111iIi )
 if 11 - 11: I11i11Ii % IiiI - i1iIi11iIIi1I
 try :
  os . remove ( i1i1II )
 except :
  pass
  if 58 - 58: Ii % ooO00oOoo
 xbmc . executebuiltin ( "UpdateLocalAddons" )
 xbmc . executebuiltin ( "UpdateAddonRepos" )
 if 54 - 54: Oo0ooO0oo0oO % o0o00Oo0O + I11i11Ii - o00 / I1i1iI1i
 if 31 - 31: i11ii11iIi11i + ooO0OO000o
def i11IiIiiIIIII ( ) :
 if os . path . exists ( os . path . join ( xbmc . translatePath ( "special://home/addons/" ) . decode ( "utf-8" ) , 'repository.docshadrach' ) ) :
  return
  if 22 - 22: o00ooo0 * o0o00Oo0O / IiiI
 IiII = "https://github.com/XBMCSpot/docshadrach.repository/raw/master/zips/repository.docshadrach-1.0.zip"
 iI1Ii11111iIi = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) ) . decode ( "utf-8" )
 i1i1II = os . path . join ( iI1Ii11111iIi , 'packages' , 'isr.zip' )
 if 64 - 64: o00ooo0 % ii1I % ii
 urllib . urlretrieve ( IiII , i1i1II )
 ii11i ( i1i1II , iI1Ii11111iIi )
 if 3 - 3: o00 + o0o00Oo0O
 try :
  os . remove ( i1i1II )
 except :
  pass
  if 42 - 42: Oo0ooO0oo0oO / ii1I + Ii - o00ooo0
 xbmc . executebuiltin ( "UpdateLocalAddons" )
 xbmc . executebuiltin ( "UpdateAddonRepos" )
 if 78 - 78: i11ii11iIi11i
 if 18 - 18: o0o00Oo0O - o00 / o00 + O0OOo % O0OOo - Oo0oO0ooo
i11IiIiiIIIII ( )
if 62 - 62: o00 - Oo0oO0ooo - oOoO0oo0OOOo % ii1I / o0OO0
if 77 - 77: ooO0OO000o - ooO0OO000o . I11i11Ii / IiiI
i1iIIIiI1I = False
if 70 - 70: i1iIi11iIIi1I % i1iIi11iIIi1I . Oo0oO0ooo % i11ii11iIi11i * IiiI % o0OO0
iiI1IiI = [ '180upload.com' , 'allmyvideos.net' , 'bestreams.net' , 'clicknupload.com' , 'cloudzilla.to' , 'movshare.net' , 'novamov.com' , 'nowvideo.sx' , 'videoweed.es' , 'daclips.in' , 'datemule.com' , 'fastvideo.in' , 'faststream.in' , 'filehoot.com' , 'filenuke.com' , 'sharesix.com' , 'plus.google.com' , 'picasaweb.google.com' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'ipithos.to' , 'ishared.eu' , 'kingfiles.net' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'mightyupload.com' , 'mooshare.biz' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movreel.com' , 'mrfile.me' , 'nosvideo.com' , 'openload.io' , 'played.to' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'primeshare.tv' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'sharerepo.com' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'thefile.me' , 'thevideo.me' , 'tusfiles.net' , 'uploadc.com' , 'zalaa.com' , 'uploadrocket.net' , 'uptobox.com' , 'v-vids.com' , 'veehd.com' , 'vidbull.com' , 'videomega.tv' , 'vidplay.net' , 'vidspot.net' , 'vidto.me' , 'vidzi.tv' , 'vimeo.com' , 'vk.com' , 'vodlocker.com' , 'xfileload.com' , 'xvidstage.com' , 'zettahost.tv' ]
II = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
if 57 - 57: o0OO0
class iI ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 22 - 22: i1iIi11iIIi1I % o00ooo0
oo = False ;
if oo :
 if 54 - 54: Oo0ooO0oo0oO + Oo0ooO0oo0oO % ooO00oOoo % Ii / iI11I1II1I1I . Oo0ooO0oo0oO
 if 57 - 57: o00ooo0 % ii
 try :
  import pysrc . pydevd as pydevd
  if 61 - 61: o00 . iI11I1II1I1I * I11i11Ii . O0OOo % i1iIi11iIIi1I
  pydevd . settrace ( 'localhost' , stdoutToServer = True , stderrToServer = True )
 except ImportError :
  sys . stderr . write ( "Error: " +
 "You must add org.python.pydev.debug.pysrc to your PYTHONPATH." )
  sys . exit ( 1 )
  if 72 - 72: Oo0ooO0oo0oO
  if 63 - 63: o00ooo0
O00 = xbmcaddon . Addon ( 'plugin.video.goldentv' )
iII11i = O00 . getAddonInfo ( 'version' )
O0O00o0OOO0 = xbmc . translatePath ( O00 . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
Ii1iIIIi1ii = xbmc . translatePath ( O00 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
o0oo0o0O00OO = os . path . join ( O0O00o0OOO0 , 'favorites' )
o0oO = os . path . join ( O0O00o0OOO0 , 'history' )
I1i1iii = os . path . join ( O0O00o0OOO0 , 'list_revision' )
i1iiI11I = os . path . join ( Ii1iIIIi1ii , 'icon.png' )
iiii = os . path . join ( Ii1iIIIi1ii , 'fanart.jpg' )
oO0o0O0OOOoo0 = os . path . join ( O0O00o0OOO0 , 'source_file' )
IiIiiI = O0O00o0OOO0
I1I = os . path . join ( O0O00o0OOO0 , 'LivewebTV' )
downloader = downloader . SimpleDownloader ( )
oOO00oOO = O00 . getSetting ( 'debug' )
if 75 - 75: ii1I / ii - o0o00Oo0O / oOoO0oo0OOOo . ooO0OO000o - ii1I
if os . path . exists ( o0oo0o0O00OO ) == True :
 O000OO0 = open ( o0oo0o0O00OO ) . read ( )
else : O000OO0 = [ ]
if 43 - 43: ooO00oOoo - o0o00Oo0O % I11i11Ii . I1i1iI1i
o00OooOooo = [ { "url" : "http://legionworldtv.com/secure/goldenmain.txt" , "fanart" : "https://img.fotor.com/share/1483582004253ipJ.jpg" } ]
if 97 - 97: O0OOo - Oo0ooO0oo0oO * Ii / oOoO0oo0OOOo % ooO00oOoo - ii
if 59 - 59: o0o00Oo0O + I11i11Ii + Oo0oO0ooo % I11i11Ii
if 70 - 70: o00 * Iii1ii1II11i
def i1II1 ( string ) :
 if oOO00oOO == 'true' :
  xbmc . log ( "[addon.live.streamspro-%s]: %s" % ( iII11i , string ) )
  if 66 - 66: ii + o00ooo0 + o00ooo0 - ii1I
  if 55 - 55: Oo0ooO0oo0oO + O0OOo . ii1I - Iii1ii1II11i . o0o00Oo0O - O0OOo
def o0O ( url , headers = None ) :
 try :
  if headers is None :
   headers = { 'User-agent' : 'THEHOOD' }
  O00oO = urllib2 . Request ( url , None , headers )
  I11i1I1I = urllib2 . urlopen ( O00oO )
  oO0Oo = I11i1I1I . read ( )
  I11i1I1I . close ( )
  return oO0Oo
 except urllib2 . URLError , iI1 :
  i1II1 ( 'URL: ' + url )
  if hasattr ( iI1 , 'code' ) :
   i1II1 ( 'We failed with error code - %s.' % iI1 . code )
   xbmc . executebuiltin ( "XBMC.Notification(goldentv,We failed with error code - " + str ( iI1 . code ) + ",10000," + i1iiI11I + ")" )
  elif hasattr ( iI1 , 'reason' ) :
   i1II1 ( 'We failed to reach a server.' )
   i1II1 ( 'Reason: %s' % iI1 . reason )
   xbmc . executebuiltin ( "XBMC.Notification(goldentv,We failed to reach a server. - " + str ( iI1 . reason ) + ",10000," + i1iiI11I + ")" )
   if 54 - 54: IiiI - I11i11Ii + ii
   if 70 - 70: o00ooo0 / I1i1iI1i . o00 % i1iIi11iIIi1I
def OOoOO00OOO0OO ( ) :
 try :
  if os . path . exists ( o0oo0o0O00OO ) == True :
   O000OO0 = open ( o0oo0o0O00OO ) . read ( )
   if O000OO0 == "[]" :
    os . remove ( o0oo0o0O00OO )
   else :
    iI1I111Ii111i ( '[COLOR yellow][B]- MIS CANALES FAVORITOS[/COLOR][/B]' , 'url' , 4 , os . path . join ( Ii1iIIIi1ii , 'resources' , 'favorite.png' ) , iiii , '' , '' , '' , '' )
    iI1I111Ii111i ( '' , '' , 100 , '' , iiii , '' , '' , '' , '' )
    if 7 - 7: O0OOo * i11ii11iIi11i % o0OO0 . Oo0oO0ooo
  Ii1iIiII1ii1 = o00OooOooo
  if len ( Ii1iIiII1ii1 ) > 1 :
   for ooOooo000oOO in Ii1iIiII1ii1 :
    try :
     if 59 - 59: ooO0OO000o + ii * oOoO0oo0OOOo + ii1I
     if isinstance ( ooOooo000oOO , list ) :
      iI1I111Ii111i ( ooOooo000oOO [ 0 ] . encode ( 'utf-8' ) , ooOooo000oOO [ 1 ] . encode ( 'utf-8' ) , 1 , i1iiI11I , iiii , '' , '' , '' , '' , 'source' )
     else :
      Oo0OoO00oOO0o = i1iiI11I
      OOO00O = iiii
      OOoOO0oo0ooO = ''
      O0o0O00Oo0o0 = ''
      credits = ''
      O00O0oOO00O00 = ''
      if ooOooo000oOO . has_key ( 'thumbnail' ) :
       Oo0OoO00oOO0o = ooOooo000oOO [ 'thumbnail' ]
      if ooOooo000oOO . has_key ( 'fanart' ) :
       OOO00O = ooOooo000oOO [ 'fanart' ]
      if ooOooo000oOO . has_key ( 'description' ) :
       OOoOO0oo0ooO = ooOooo000oOO [ 'description' ]
      if ooOooo000oOO . has_key ( 'date' ) :
       O0o0O00Oo0o0 = ooOooo000oOO [ 'date' ]
      if ooOooo000oOO . has_key ( 'genre' ) :
       O00O0oOO00O00 = ooOooo000oOO [ 'genre' ]
      if ooOooo000oOO . has_key ( 'credits' ) :
       credits = ooOooo000oOO [ 'credits' ]
      iI1I111Ii111i ( ooOooo000oOO [ 'title' ] . encode ( 'utf-8' ) , ooOooo000oOO [ 'url' ] . encode ( 'utf-8' ) , 1 , Oo0OoO00oOO0o , OOO00O , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , credits , 'source' )
    except : traceback . print_exc ( )
  else :
   if len ( Ii1iIiII1ii1 ) == 1 :
    if isinstance ( Ii1iIiII1ii1 [ 0 ] , list ) :
     i1 ( Ii1iIiII1ii1 [ 0 ] [ 1 ] . encode ( 'utf-8' ) , iiii )
    else :
     i1 ( Ii1iIiII1ii1 [ 0 ] [ 'url' ] , Ii1iIiII1ii1 [ 0 ] [ 'fanart' ] )
 except : traceback . print_exc ( )
 if 57 - 57: o0o00Oo0O / ooO00oOoo % i11ii11iIi11i / ooO00oOoo . oOoO0oo0OOOo / o0o00Oo0O
 if 89 - 89: oOoO0oo0OOOo
def OO0oOoOO0oOO0 ( url = None ) :
 if url is None :
  if not O00 . getSetting ( "new_file_source" ) == "" :
   oO0OOoo0OO = O00 . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not O00 . getSetting ( "new_url_source" ) == "" :
   oO0OOoo0OO = O00 . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  oO0OOoo0OO = url
 if oO0OOoo0OO == '' or oO0OOoo0OO is None :
  return
 i1II1 ( 'Adding New Source: ' + oO0OOoo0OO . encode ( 'utf-8' ) )
 if 65 - 65: o00ooo0 . iI11I1II1I1I / o0o00Oo0O - o00ooo0
 iii1i1iiiiIi = None
 if 2 - 2: I11i11Ii / o0o00Oo0O / IiiI % oOoO0oo0OOOo % o00ooo0
 oO0Oo = o0o00OO0 ( oO0OOoo0OO )
 if 7 - 7: Oo0ooO0oo0oO + ooO00oOoo + o0o00Oo0O
 if isinstance ( oO0Oo , BeautifulSOAP ) :
  if oO0Oo . find ( 'channels_info' ) :
   iii1i1iiiiIi = oO0Oo . channels_info
  elif oO0Oo . find ( 'items_info' ) :
   iii1i1iiiiIi = oO0Oo . items_info
 if iii1i1iiiiIi :
  IiO0OOO = { }
  IiO0OOO [ 'url' ] = oO0OOoo0OO
  try : IiO0OOO [ 'title' ] = iii1i1iiiiIi . title . string
  except : pass
  try : IiO0OOO [ 'thumbnail' ] = iii1i1iiiiIi . thumbnail . string
  except : pass
  try : IiO0OOO [ 'fanart' ] = iii1i1iiiiIi . fanart . string
  except : pass
  try : IiO0OOO [ 'genre' ] = iii1i1iiiiIi . genre . string
  except : pass
  try : IiO0OOO [ 'description' ] = iii1i1iiiiIi . description . string
  except : pass
  try : IiO0OOO [ 'date' ] = iii1i1iiiiIi . date . string
  except : pass
  try : IiO0OOO [ 'credits' ] = iii1i1iiiiIi . credits . string
  except : pass
 else :
  if '/' in oO0OOoo0OO :
   II11iIiIIIiI = oO0OOoo0OO . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in oO0OOoo0OO :
   II11iIiIIIiI = oO0OOoo0OO . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in II11iIiIIIiI :
   II11iIiIIIiI = urllib . unquote_plus ( II11iIiIIIiI )
  o0o = xbmc . Keyboard ( II11iIiIIIiI , 'Displayed Name, Rename?' )
  o0o . doModal ( )
  if ( o0o . isConfirmed ( ) == False ) :
   return
  o00OooOO000 = o0o . getText ( )
  if len ( o00OooOO000 ) == 0 :
   return
  IiO0OOO = { }
  IiO0OOO [ 'title' ] = o00OooOO000
  IiO0OOO [ 'url' ] = oO0OOoo0OO
  IiO0OOO [ 'fanart' ] = OOO00O
  if 97 - 97: Iii1ii1II11i + Oo0ooO0oo0oO / iI11I1II1I1I / o00
 if os . path . exists ( oO0o0O0OOOoo0 ) == False :
  I1111IIi = [ ]
  I1111IIi . append ( IiO0OOO )
  Oo0oO = open ( oO0o0O0OOOoo0 , "w" )
  Oo0oO . write ( json . dumps ( I1111IIi ) )
  Oo0oO . close ( )
 else :
  Ii1iIiII1ii1 = json . loads ( open ( oO0o0O0OOOoo0 , "r" ) . read ( ) )
  Ii1iIiII1ii1 . append ( IiO0OOO )
  Oo0oO = open ( oO0o0O0OOOoo0 , "w" )
  Oo0oO . write ( json . dumps ( Ii1iIiII1ii1 ) )
  Oo0oO . close ( )
 O00 . setSetting ( 'new_url_source' , "" )
 O00 . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(AdryanList,New source added.,5000," + i1iiI11I + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : O00 . openSettings ( )
 if 1 - 1: i11ii11iIi11i - o0OO0 . I1i1iI1i . i11ii11iIi11i / i1iIi11iIIi1I + I1i1iI1i
 if 78 - 78: o0o00Oo0O . o0OO0 . ooO0OO000o % Oo0ooO0oo0oO
def i1iIi ( name ) :
 Ii1iIiII1ii1 = json . loads ( open ( oO0o0O0OOOoo0 , "r" ) . read ( ) )
 for ooOOoooooo in range ( len ( Ii1iIiII1ii1 ) ) :
  if isinstance ( Ii1iIiII1ii1 [ ooOOoooooo ] , list ) :
   if Ii1iIiII1ii1 [ ooOOoooooo ] [ 0 ] == name :
    del Ii1iIiII1ii1 [ ooOOoooooo ]
    Oo0oO = open ( oO0o0O0OOOoo0 , "w" )
    Oo0oO . write ( json . dumps ( Ii1iIiII1ii1 ) )
    Oo0oO . close ( )
    break
  else :
   if Ii1iIiII1ii1 [ ooOOoooooo ] [ 'title' ] == name :
    del Ii1iIiII1ii1 [ ooOOoooooo ]
    Oo0oO = open ( oO0o0O0OOOoo0 , "w" )
    Oo0oO . write ( json . dumps ( Ii1iIiII1ii1 ) )
    Oo0oO . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 1 - 1: i1iIi11iIIi1I / IiiI % o00 * Oo0oO0ooo . Ii
 if 2 - 2: Iii1ii1II11i * I1i1iI1i - iI11I1II1I1I + I11i11Ii . o0OO0 % o00
def ooOOOoOooOoO ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 o00oooO0Oo = BeautifulSoup ( o0O ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for ooOooo000oOO in o00oooO0Oo ( 'a' ) :
  o0O0OOO0Ooo = ooOooo000oOO [ 'href' ]
  if not o0O0OOO0Ooo . startswith ( '?' ) :
   iiIiI = ooOooo000oOO . string
   if iiIiI not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if o0O0OOO0Ooo . endswith ( '/' ) :
     if browse :
      iI1I111Ii111i ( iiIiI , url + o0O0OOO0Ooo , 15 , i1iiI11I , OOO00O , '' , '' , '' )
     else :
      iI1I111Ii111i ( iiIiI , url + o0O0OOO0Ooo , 14 , i1iiI11I , OOO00O , '' , '' , '' )
    elif o0O0OOO0Ooo . endswith ( '.xml' ) :
     if browse :
      iI1I111Ii111i ( iiIiI , url + o0O0OOO0Ooo , 1 , i1iiI11I , OOO00O , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( oO0o0O0OOOoo0 ) == True :
       if iiIiI in o00OooOooo :
        iI1I111Ii111i ( iiIiI + ' (in use)' , url + o0O0OOO0Ooo , 11 , i1iiI11I , OOO00O , '' , '' , '' , '' , 'download' )
       else :
        iI1I111Ii111i ( iiIiI , url + o0O0OOO0Ooo , 11 , i1iiI11I , OOO00O , '' , '' , '' , '' , 'download' )
      else :
       iI1I111Ii111i ( iiIiI , url + o0O0OOO0Ooo , 11 , i1iiI11I , OOO00O , '' , '' , '' , '' , 'download' )
       if 6 - 6: Oo0oO0ooo . o0OO0 * oOoO0oo0OOOo - o00ooo0 - Oo0oO0ooo
       if 45 - 45: I11i11Ii - ii + iI11I1II1I1I . I11i11Ii * I1i1iI1i
def oOOO ( browse = False ) :
 IiII = 'http://community-links.googlecode.com/svn/trunk/'
 o00oooO0Oo = BeautifulSoup ( o0O ( IiII ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 iIII1 = o00oooO0Oo ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for ooOooo000oOO in iIII1 :
  iiIiI = ooOooo000oOO ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   iI1I111Ii111i ( iiIiI , IiII + iiIiI , 1 , i1iiI11I , OOO00O , '' , '' , '' , '' , 'download' )
  else :
   iI1I111Ii111i ( iiIiI , IiII + iiIiI , 11 , i1iiI11I , OOO00O , '' , '' , '' , '' , 'download' )
   if 65 - 65: o0o00Oo0O
   if 68 - 68: Oo0ooO0oo0oO % ooO00oOoo
def o0o00OO0 ( url , data = None ) :
 global oo000 , i1iIIIiI1I
 i1iIIIiI1I = False
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  ooO00OO0 = False
  if '$$TSDOWNLOADER$$' in url :
   i1iIIIiI1I = True
   url = url . replace ( "$$TSDOWNLOADER$$" , "" )
  if '$$LSProEncKey=' in url :
   ooO00OO0 = url . split ( '$$LSProEncKey=' ) [ 1 ] . split ( '$$' ) [ 0 ]
   i11111IIIII = '$$LSProEncKey=%s$$' % ooO00OO0
   url = url . replace ( i11111IIIII , "" )
   if 19 - 19: oOoO0oo0OOOo * ii1I
  data = o0O ( url )
  if ooO00OO0 :
   import pyaes
   ooO00OO0 = ooO00OO0 . encode ( "ascii" )
   print ooO00OO0
   ii111iI1iIi1 = 16 - len ( ooO00OO0 )
   ooO00OO0 = ooO00OO0 + ( chr ( 0 ) * ( ii111iI1iIi1 ) )
   print repr ( ooO00OO0 )
   data = base64 . b64decode ( data )
   OOO = pyaes . new ( ooO00OO0 , pyaes . MODE_ECB , IV = None )
   data = OOO . decrypt ( data ) . split ( '\0' ) [ 0 ]
   if 68 - 68: ooO0OO000o + I1i1iI1i
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   if 45 - 45: o00 / o00 + ooO00oOoo + O0OOo
   return data
 elif data == None :
  if not '/' in url or not '\\' in url :
   if 47 - 47: IiiI + O0OOo
   url = os . path . join ( I1I , url )
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    OoO = xbmcvfs . copy ( url , os . path . join ( O0O00o0OOO0 , 'temp' , 'sorce_temp.txt' ) )
    if OoO :
     data = open ( os . path . join ( O0O00o0OOO0 , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( O0O00o0OOO0 , 'temp' , 'sorce_temp.txt' ) )
    else :
     i1II1 ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     if 88 - 88: o00 . ooO0OO000o * ooO0OO000o % ooO00oOoo
     return data
  else :
   i1II1 ( "Soup Data not found!" )
   return
 if '<SetViewMode>' in data :
  try :
   oo000 = re . findall ( '<SetViewMode>(.*?)<' , data ) [ 0 ]
   xbmc . executebuiltin ( "Container.SetViewMode(%s)" % oo000 )
   print 'done setview' , oo000
  except : pass
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 15 - 15: ii1I * I11i11Ii + Ii
 if 6 - 6: O0OOo / Ii + o00 * o0OO0
def i1 ( url , fanart , data = None ) :
 o00oooO0Oo = o0o00OO0 ( url , data )
 if 80 - 80: ooO0OO000o
 if isinstance ( o00oooO0Oo , BeautifulSOAP ) :
  if 83 - 83: I1i1iI1i . Ii + ooO0OO000o . IiiI * I1i1iI1i
  if len ( o00oooO0Oo ( 'channels' ) ) > 0 and O00 . getSetting ( 'donotshowbychannels' ) == 'false' :
   oooO0 = o00oooO0Oo ( 'channel' )
   for iIiIiiIIiIIi in oooO0 :
    if 98 - 98: IiiI
    if 51 - 51: i1iIi11iIIi1I - o0OO0 + ooO0OO000o * o00ooo0 . I1i1iI1i + o0OO0
    OoO0o = ''
    oO0o0Ooooo = 0
    try :
     OoO0o = iIiIiiIIiIIi ( 'externallink' ) [ 0 ] . string
     oO0o0Ooooo = len ( iIiIiiIIiIIi ( 'externallink' ) )
    except : pass
    if 94 - 94: IiiI * o00ooo0 / i1iIi11iIIi1I / o00ooo0
    if oO0o0Ooooo > 1 : OoO0o = ''
    if 87 - 87: i1iIi11iIIi1I . Oo0oO0ooo
    iiIiI = iIiIiiIIiIIi ( 'name' ) [ 0 ] . string
    O0OO0O = iIiIiiIIiIIi ( 'thumbnail' ) [ 0 ] . string
    if O0OO0O == None :
     O0OO0O = ''
     if 81 - 81: o0OO0 . IiiI % o0o00Oo0O / I11i11Ii - o0OO0
    try :
     if not iIiIiiIIiIIi ( 'fanart' ) :
      if O00 . getSetting ( 'use_thumb' ) == "true" :
       Ii1I1i = O0OO0O
      else :
       Ii1I1i = fanart
     else :
      Ii1I1i = iIiIiiIIiIIi ( 'fanart' ) [ 0 ] . string
     if Ii1I1i == None :
      raise
    except :
     Ii1I1i = fanart
     if 99 - 99: o0OO0 . o00 + O0OOo % o0OO0 . Ii % o0o00Oo0O
    try :
     OOoOO0oo0ooO = iIiIiiIIiIIi ( 'info' ) [ 0 ] . string
     if OOoOO0oo0ooO == None :
      raise
    except :
     OOoOO0oo0ooO = ''
     if 78 - 78: Iii1ii1II11i + Oo0ooO0oo0oO - ooO00oOoo
    try :
     O00O0oOO00O00 = iIiIiiIIiIIi ( 'genre' ) [ 0 ] . string
     if O00O0oOO00O00 == None :
      raise
    except :
     O00O0oOO00O00 = ''
     if 38 - 38: IiiI - o0OO0 + iI11I1II1I1I / oOoO0oo0OOOo % i1iIi11iIIi1I
    try :
     O0o0O00Oo0o0 = iIiIiiIIiIIi ( 'date' ) [ 0 ] . string
     if O0o0O00Oo0o0 == None :
      raise
    except :
     O0o0O00Oo0o0 = ''
     if 57 - 57: i11ii11iIi11i / O0OOo
    try :
     credits = iIiIiiIIiIIi ( 'credits' ) [ 0 ] . string
     if credits == None :
      raise
    except :
     credits = ''
     if 29 - 29: iI11I1II1I1I + oOoO0oo0OOOo * i11ii11iIi11i * Oo0ooO0oo0oO . I11i11Ii * I11i11Ii
    try :
     if OoO0o == '' :
      iI1I111Ii111i ( iiIiI . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , O0OO0O , Ii1I1i , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , credits , True )
     else :
      if 7 - 7: Oo0oO0ooo * ooO00oOoo % o00ooo0 - IiiI
      iI1I111Ii111i ( iiIiI . encode ( 'utf-8' ) , OoO0o . encode ( 'utf-8' ) , 1 , O0OO0O , Ii1I1i , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , None , 'source' )
    except :
     i1II1 ( 'There was a problem adding directory from getData(): ' + iiIiI . encode ( 'utf-8' , 'ignore' ) )
  else :
   i1II1 ( 'No Channels: getItems' )
   i1i ( o00oooO0Oo ( 'item' ) , fanart )
 else :
  oOOoo00O00o ( o00oooO0Oo )
  if 98 - 98: Oo0ooO0oo0oO + Oo0oO0ooo + o0OO0 % ii
  if 97 - 97: o0o00Oo0O * ii . ii
def oOOoo00O00o ( data ) :
 I111iI = data . rstrip ( )
 oOOo0 = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\r\n]+)' ) . findall ( I111iI )
 II1I1iiIII = len ( oOOo0 )
 print 'tsdownloader' , i1iIIIiI1I
 if 77 - 77: oOoO0oo0OOOo - ooO0OO000o - O0OOo
 for IiiiIIiIi1 , OoOOoOooooOOo , oOo0O in oOOo0 :
  if 52 - 52: Ii / IiiI * O0OOo
  if 'tvg-logo' in IiiiIIiIi1 :
   O0OO0O = iIOO0O000 ( IiiiIIiIi1 , 'tvg-logo=[\'"](.*?)[\'"]' )
   if O0OO0O :
    if O0OO0O . startswith ( 'http' ) :
     O0OO0O = O0OO0O
     if 37 - 37: ii - o0o00Oo0O - IiiI
    elif not O00 . getSetting ( 'logo-folderPath' ) == "" :
     o0o0O0O00oOOo = O00 . getSetting ( 'logo-folderPath' )
     O0OO0O = o0o0O0O00oOOo + O0OO0O
     if 14 - 14: oOoO0oo0OOOo + o0OO0
    else :
     O0OO0O = O0OO0O
     if 52 - 52: ii - O0OOo
     if 74 - 74: o00 + IiiI
  else :
   O0OO0O = ''
   if 71 - 71: i1iIi11iIIi1I % Oo0ooO0oo0oO
  if 'type' in IiiiIIiIi1 :
   O00oO000O0O = iIOO0O000 ( IiiiIIiIi1 , 'type=[\'"](.*?)[\'"]' )
   if O00oO000O0O == 'yt-dl' :
    oOo0O = oOo0O + "&mode=18"
   elif O00oO000O0O == 'regex' :
    IiII = oOo0O . split ( '&regexs=' )
    if 18 - 18: o00 - Oo0ooO0oo0oO . ooO00oOoo . iI11I1II1I1I
    i1I = O0ooooOOoo0O ( o0o00OO0 ( '' , data = IiII [ 1 ] ) )
    if 36 - 36: o0OO0 % o0OO0 % ii1I / ii1I - O0OOo
    i1iI ( IiII [ 0 ] , OoOOoOooooOOo , O0OO0O , '' , '' , '' , '' , '' , None , i1I , II1I1iiIII )
    continue
   elif O00oO000O0O == 'ftv' :
    oOo0O = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( OoOOoOooooOOo ) + '&url=' + oOo0O + '&mode=125&ch_fanart=na'
  elif i1iIIIiI1I and '.ts' in oOo0O :
   oOo0O = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( oOo0O ) + '&amp;streamtype=TSDOWNLOADER&name=' + urllib . quote ( OoOOoOooooOOo )
  i1iI ( oOo0O , OoOOoOooooOOo , O0OO0O , '' , '' , '' , '' , '' , None , '' , II1I1iiIII )
  if 94 - 94: iI11I1II1I1I / i1iIi11iIIi1I % o00 * o00 * ooO0OO000o
  if 29 - 29: i11ii11iIi11i + oOoO0oo0OOOo / IiiI / Oo0ooO0oo0oO * iI11I1II1I1I
def O0OO ( name , url , fanart ) :
 o00oooO0Oo = o0o00OO0 ( url )
 ii1iI1I11I = o00oooO0Oo . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 II1iI = ii1iI1I11I ( 'item' )
 try :
  Ii1I1i = ii1iI1I11I ( 'fanart' ) [ 0 ] . string
  if Ii1I1i == None :
   raise
 except :
  Ii1I1i = fanart
 for iIiIiiIIiIIi in ii1iI1I11I ( 'subchannel' ) :
  name = iIiIiiIIiIIi ( 'name' ) [ 0 ] . string
  try :
   O0OO0O = iIiIiiIIiIIi ( 'thumbnail' ) [ 0 ] . string
   if O0OO0O == None :
    raise
  except :
   O0OO0O = ''
  try :
   if not iIiIiiIIiIIi ( 'fanart' ) :
    if O00 . getSetting ( 'use_thumb' ) == "true" :
     Ii1I1i = O0OO0O
   else :
    Ii1I1i = iIiIiiIIiIIi ( 'fanart' ) [ 0 ] . string
   if Ii1I1i == None :
    raise
  except :
   pass
  try :
   OOoOO0oo0ooO = iIiIiiIIiIIi ( 'info' ) [ 0 ] . string
   if OOoOO0oo0ooO == None :
    raise
  except :
   OOoOO0oo0ooO = ''
   if 54 - 54: ooO00oOoo * Oo0oO0ooo / ooO00oOoo / i1iIi11iIIi1I * oOoO0oo0OOOo
  try :
   O00O0oOO00O00 = iIiIiiIIiIIi ( 'genre' ) [ 0 ] . string
   if O00O0oOO00O00 == None :
    raise
  except :
   O00O0oOO00O00 = ''
   if 94 - 94: Oo0oO0ooo * Iii1ii1II11i . O0OOo . O0OOo / oOoO0oo0OOOo - ooO00oOoo
  try :
   O0o0O00Oo0o0 = iIiIiiIIiIIi ( 'date' ) [ 0 ] . string
   if O0o0O00Oo0o0 == None :
    raise
  except :
   O0o0O00Oo0o0 = ''
   if 86 - 86: iI11I1II1I1I / oOoO0oo0OOOo . ooO0OO000o
  try :
   credits = iIiIiiIIiIIi ( 'credits' ) [ 0 ] . string
   if credits == None :
    raise
  except :
   credits = ''
   if 19 - 19: Iii1ii1II11i % ii % Oo0oO0ooo * IiiI % o0o00Oo0O
  try :
   iI1I111Ii111i ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , O0OO0O , Ii1I1i , OOoOO0oo0ooO , O00O0oOO00O00 , credits , O0o0O00Oo0o0 )
  except :
   i1II1 ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 i1i ( II1iI , Ii1I1i )
 if 67 - 67: I11i11Ii . ii1I
 if 27 - 27: O0OOo % I11i11Ii
def o0oooOO00 ( name , url , fanart ) :
 o00oooO0Oo = o0o00OO0 ( url )
 ii1iI1I11I = o00oooO0Oo . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 II1iI = ii1iI1I11I ( 'subitem' )
 i1i ( II1iI , fanart )
 if 32 - 32: ooO00oOoo
 if 30 - 30: iI11I1II1I1I / I1i1iI1i . i11ii11iIi11i - IiiI
def i1i ( items , fanart , dontLink = False ) :
 II1I1iiIII = len ( items )
 i1II1 ( 'Total Items: %s' % II1I1iiIII )
 Iii11iI1i = O00 . getSetting ( 'add_playlist' )
 oOOooOoo = O00 . getSetting ( 'ask_playlist_items' )
 o0OOOoO0 = O00 . getSetting ( 'use_thumb' )
 o0OoOo00o0o = O00 . getSetting ( 'parentalblocked' )
 o0OoOo00o0o = o0OoOo00o0o == "true"
 for I1II1I11I1I in items :
  OoOO0o = False
  i1II1i11i1 = False
  if 42 - 42: Ii * iI11I1II1I1I / Iii1ii1II11i . Ii % I1i1iI1i
  i1iIIiI1iiiIii = 'false'
  try :
   i1iIIiI1iiiIii = I1II1I11I1I ( 'parentalblock' ) [ 0 ] . string
  except :
   i1II1 ( 'parentalblock Error' )
   i1iIIiI1iiiIii = ''
  if i1iIIiI1iiiIii == 'true' and o0OoOo00o0o : continue
  if 7 - 7: ooO00oOoo * i11ii11iIi11i - O0OOo + Oo0ooO0oo0oO * I11i11Ii % i11ii11iIi11i
  try :
   iiIiI = I1II1I11I1I ( 'title' ) [ 0 ] . string
   if iiIiI is None :
    iiIiI = 'unknown?'
  except :
   i1II1 ( 'Name Error' )
   iiIiI = ''
   if 15 - 15: oOoO0oo0OOOo % I11i11Ii * I1i1iI1i
   if 81 - 81: O0OOo - iI11I1II1I1I - ii1I / ooO00oOoo - o0o00Oo0O * I1i1iI1i
  try :
   if I1II1I11I1I ( 'epg' ) :
    if I1II1I11I1I . epg_url :
     i1II1 ( 'Get EPG Regex' )
     iI1i11II1i = I1II1I11I1I . epg_url . string
     o0o0OoOo0O0OO = I1II1I11I1I . epg_regex . string
     iIi1I11I = Iii1 ( iI1i11II1i , o0o0OoOo0O0OO )
     if iIi1I11I :
      iiIiI += ' - ' + iIi1I11I
    elif I1II1I11I1I ( 'epg' ) [ 0 ] . string > 1 :
     iiIiI += ooO ( I1II1I11I1I ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   i1II1 ( 'EPG Error' )
  try :
   IiII = [ ]
   if len ( I1II1I11I1I ( 'link' ) ) > 0 :
    if 84 - 84: Oo0ooO0oo0oO - o00 / O0OOo
    if 65 - 65: o00ooo0 / I1i1iI1i / oOoO0oo0OOOo
    for ooOooo000oOO in I1II1I11I1I ( 'link' ) :
     if not ooOooo000oOO . string == None :
      IiII . append ( ooOooo000oOO . string )
      if 92 - 92: o0o00Oo0O - o00 . Oo0ooO0oo0oO * o00ooo0
   elif len ( I1II1I11I1I ( 'sportsdevil' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'sportsdevil' ) :
     if not ooOooo000oOO . string == None :
      I1iI = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + ooOooo000oOO . string
      IIIIiIiIi1 = I1II1I11I1I ( 'referer' ) [ 0 ] . string
      if IIIIiIiIi1 :
       if 2 - 2: o00 % iI11I1II1I1I * iI11I1II1I1I . IiiI / o00
       I1iI = I1iI + '%26referer=' + IIIIiIiIi1
      IiII . append ( I1iI )
   elif len ( I1II1I11I1I ( 'p2p' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'p2p' ) :
     if not ooOooo000oOO . string == None :
      if 'sop://' in ooOooo000oOO . string :
       iII1i1 = 'plugin://plugin.video.p2p-streams/?mode=2url=' + ooOooo000oOO . string + '&' + 'name=' + iiIiI
       IiII . append ( iII1i1 )
      else :
       O0oOOoooOO0O = 'plugin://plugin.video.p2p-streams/?mode=1&url=' + ooOooo000oOO . string + '&' + 'name=' + iiIiI
       IiII . append ( O0oOOoooOO0O )
   elif len ( I1II1I11I1I ( 'vaughn' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'vaughn' ) :
     if not ooOooo000oOO . string == None :
      ooo00Ooo = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + ooOooo000oOO . string
      IiII . append ( ooo00Ooo )
   elif len ( I1II1I11I1I ( 'ilive' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'ilive' ) :
     if not ooOooo000oOO . string == None :
      if not 'http' in ooOooo000oOO . string :
       Oo0o0O00 = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + ooOooo000oOO . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       Oo0o0O00 = 'plugin://plugin.video.tbh.ilive/?url=' + ooOooo000oOO . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( I1II1I11I1I ( 'yt-dl' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'yt-dl' ) :
     if not ooOooo000oOO . string == None :
      ii1 = ooOooo000oOO . string + '&mode=18'
      IiII . append ( ii1 )
   elif len ( I1II1I11I1I ( 'dm' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'dm' ) :
     if not ooOooo000oOO . string == None :
      I1i11 = "plugin://plugin.video.dailymotion_com/?mode=playVideo&url=" + ooOooo000oOO . string
      IiII . append ( I1i11 )
   elif len ( I1II1I11I1I ( 'dmlive' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'dmlive' ) :
     if not ooOooo000oOO . string == None :
      I1i11 = "plugin://plugin.video.dailymotion_com/?mode=playLiveVideo&url=" + ooOooo000oOO . string
      IiII . append ( I1i11 )
   elif len ( I1II1I11I1I ( 'utube' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'utube' ) :
     if not ooOooo000oOO . string == None :
      if ' ' in ooOooo000oOO . string :
       OO = 'plugin://plugin.video.youtube/search/?q=' + urllib . quote_plus ( ooOooo000oOO . string )
       i1II1i11i1 = OO
      elif len ( ooOooo000oOO . string ) == 11 :
       OO = 'plugin://plugin.video.youtube/play/?video_id=' + ooOooo000oOO . string
      elif ( ooOooo000oOO . string . startswith ( 'PL' ) and not '&order=' in ooOooo000oOO . string ) or ooOooo000oOO . string . startswith ( 'UU' ) :
       OO = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + ooOooo000oOO . string
      elif ooOooo000oOO . string . startswith ( 'PL' ) or ooOooo000oOO . string . startswith ( 'UU' ) :
       OO = 'plugin://plugin.video.youtube/play/?playlist_id=' + ooOooo000oOO . string
      elif ooOooo000oOO . string . startswith ( 'UC' ) and len ( ooOooo000oOO . string ) > 12 :
       OO = 'plugin://plugin.video.youtube/channel/' + ooOooo000oOO . string + '/'
       i1II1i11i1 = OO
      elif not ooOooo000oOO . string . startswith ( 'UC' ) and not ( ooOooo000oOO . string . startswith ( 'PL' ) ) :
       OO = 'plugin://plugin.video.youtube/user/' + ooOooo000oOO . string + '/'
       i1II1i11i1 = OO
     IiII . append ( OO )
   elif len ( I1II1I11I1I ( 'imdb' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'imdb' ) :
     if not ooOooo000oOO . string == None :
      if O00 . getSetting ( 'genesisorpulsar' ) == '0' :
       o0O0oo0OO0O = 'plugin://plugin.video.genesis/?action=play&imdb=' + ooOooo000oOO . string
      else :
       o0O0oo0OO0O = 'plugin://plugin.video.pulsar/movie/tt' + ooOooo000oOO . string + '/play'
      IiII . append ( o0O0oo0OO0O )
   elif len ( I1II1I11I1I ( 'f4m' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'f4m' ) :
     if not ooOooo000oOO . string == None :
      if '.f4m' in ooOooo000oOO . string :
       OO0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( ooOooo000oOO . string )
      elif '.m3u8' in ooOooo000oOO . string :
       OO0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( ooOooo000oOO . string ) + '&amp;streamtype=HLS'
       if 72 - 72: ii
      else :
       OO0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( ooOooo000oOO . string ) + '&amp;streamtype=SIMPLE'
     IiII . append ( OO0 )
   elif len ( I1II1I11I1I ( 'ftv' ) ) > 0 :
    for ooOooo000oOO in I1II1I11I1I ( 'ftv' ) :
     if not ooOooo000oOO . string == None :
      OooooOoooO = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( iiIiI ) + '&url=' + ooOooo000oOO . string + '&mode=125&ch_fanart=na'
     IiII . append ( OooooOoooO )
   elif len ( I1II1I11I1I ( 'urlsolve' ) ) > 0 :
    if 56 - 56: i1iIi11iIIi1I . Iii1ii1II11i . I11i11Ii
    for ooOooo000oOO in I1II1I11I1I ( 'urlsolve' ) :
     if not ooOooo000oOO . string == None :
      ii111I = ooOooo000oOO . string + '&mode=19'
      IiII . append ( ii111I )
   if len ( IiII ) < 1 :
    raise
  except :
   i1II1 ( 'Error <link> element, Passing:' + iiIiI . encode ( 'utf-8' , 'ignore' ) )
   continue
  try :
   OoOO0o = I1II1I11I1I ( 'externallink' ) [ 0 ] . string
  except : pass
  if 17 - 17: I11i11Ii . o0o00Oo0O + i11ii11iIi11i
  if OoOO0o :
   iiIiii1iI1i = [ OoOO0o ]
   OoOO0o = True
  else :
   OoOO0o = False
  try :
   i1II1i11i1 = I1II1I11I1I ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if i1II1i11i1 :
   if 34 - 34: O0OOo * I11i11Ii . ii1I * O0OOo / O0OOo
   iiIiii1iI1i = [ i1II1i11i1 ]
   if 30 - 30: Iii1ii1II11i + i1iIi11iIIi1I / i1iIi11iIIi1I % Iii1ii1II11i . Iii1ii1II11i
   i1II1i11i1 = True
  else :
   i1II1i11i1 = False
  try :
   O0OO0O = I1II1I11I1I ( 'thumbnail' ) [ 0 ] . string
   if O0OO0O == None :
    raise
  except :
   O0OO0O = ''
  try :
   if not I1II1I11I1I ( 'fanart' ) :
    if O00 . getSetting ( 'use_thumb' ) == "true" :
     Ii1I1i = O0OO0O
    else :
     Ii1I1i = fanart
   else :
    Ii1I1i = I1II1I11I1I ( 'fanart' ) [ 0 ] . string
   if Ii1I1i == None :
    raise
  except :
   Ii1I1i = fanart
  try :
   OOoOO0oo0ooO = I1II1I11I1I ( 'info' ) [ 0 ] . string
   if OOoOO0oo0ooO == None :
    raise
  except :
   OOoOO0oo0ooO = ''
   if 55 - 55: O0OOo - I1i1iI1i + ooO0OO000o + o00 % o00ooo0
  try :
   O00O0oOO00O00 = I1II1I11I1I ( 'genre' ) [ 0 ] . string
   if O00O0oOO00O00 == None :
    raise
  except :
   O00O0oOO00O00 = ''
   if 41 - 41: ii1I - I1i1iI1i - o00ooo0
  try :
   O0o0O00Oo0o0 = I1II1I11I1I ( 'date' ) [ 0 ] . string
   if O0o0O00Oo0o0 == None :
    raise
  except :
   O0o0O00Oo0o0 = ''
   if 8 - 8: i11ii11iIi11i + ooO00oOoo - IiiI % i1iIi11iIIi1I % IiiI * o0OO0
  i1I = None
  if I1II1I11I1I ( 'regex' ) :
   try :
    IIIi11I11 = I1II1I11I1I ( 'regex' )
    i1I = O0ooooOOoo0O ( IIIi11I11 )
   except :
    pass
  try :
   if 44 - 44: ooO0OO000o
   if len ( IiII ) > 1 :
    OOOO0OOO = 0
    i1i1ii = [ ]
    for ooOooo000oOO in IiII :
     if Iii11iI1i == "false" :
      OOOO0OOO += 1
      i1iI ( ooOooo000oOO , '%s) %s' % ( OOOO0OOO , iiIiI . encode ( 'utf-8' , 'ignore' ) ) , O0OO0O , Ii1I1i , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , True , i1i1ii , i1I , II1I1iiIII )
     elif Iii11iI1i == "true" and oOOooOoo == 'true' :
      if i1I :
       i1i1ii . append ( ooOooo000oOO + '&regexs=' + i1I )
      elif any ( x in ooOooo000oOO for x in iiI1IiI ) and ooOooo000oOO . startswith ( 'http' ) :
       i1i1ii . append ( ooOooo000oOO + '&mode=19' )
      else :
       i1i1ii . append ( ooOooo000oOO )
     else :
      i1i1ii . append ( ooOooo000oOO )
    if len ( i1i1ii ) > 1 :
     i1iI ( '' , iiIiI , O0OO0O , Ii1I1i , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , True , i1i1ii , i1I , II1I1iiIII )
   else :
    if 46 - 46: oOoO0oo0OOOo + i11ii11iIi11i
    if dontLink :
     return iiIiI , IiII [ 0 ] , i1I
    if OoOO0o :
     if not i1I == None :
      iI1I111Ii111i ( iiIiI . encode ( 'utf-8' ) , iiIiii1iI1i [ 0 ] . encode ( 'utf-8' ) , 1 , O0OO0O , fanart , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , None , '!!update' , i1I , IiII [ 0 ] . encode ( 'utf-8' ) )
      if 70 - 70: o00 / iI11I1II1I1I
     else :
      iI1I111Ii111i ( iiIiI . encode ( 'utf-8' ) , iiIiii1iI1i [ 0 ] . encode ( 'utf-8' ) , 1 , O0OO0O , fanart , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , None , 'source' , None , None )
      if 85 - 85: ii % ii1I * ii / Iii1ii1II11i
    elif i1II1i11i1 :
     iI1I111Ii111i ( iiIiI . encode ( 'utf-8' ) , iiIiii1iI1i [ 0 ] , 53 , O0OO0O , fanart , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , None , 'source' )
     if 96 - 96: ii + o0OO0
    else :
     if 44 - 44: o0OO0
     i1iI ( IiII [ 0 ] , iiIiI . encode ( 'utf-8' , 'ignore' ) , O0OO0O , Ii1I1i , OOoOO0oo0ooO , O00O0oOO00O00 , O0o0O00Oo0o0 , True , None , i1I , II1I1iiIII )
     if 20 - 20: I1i1iI1i + o00ooo0 / o0o00Oo0O % iI11I1II1I1I
  except :
   i1II1 ( 'There was a problem adding item - ' + iiIiI . encode ( 'utf-8' , 'ignore' ) )
   if 88 - 88: oOoO0oo0OOOo / ooO0OO000o
   if 87 - 87: Iii1ii1II11i - Iii1ii1II11i - o00 + o0OO0
def O0ooooOOoo0O ( reg_item ) :
 try :
  i1I = { }
  for ooOooo000oOO in reg_item :
   i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] = { }
   i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'name' ] = ooOooo000oOO ( 'name' ) [ 0 ] . string
   if 82 - 82: o0OO0 / iI11I1II1I1I . I11i11Ii . Oo0ooO0oo0oO / IiiI
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'expres' ] = ooOooo000oOO ( 'expres' ) [ 0 ] . string
    if not i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'expres' ] :
     i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'expres' ] = ''
   except :
    i1II1 ( "Regex: -- No Referer --" )
   i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'page' ] = ooOooo000oOO ( 'page' ) [ 0 ] . string
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'referer' ] = ooOooo000oOO ( 'referer' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No Referer --" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'connection' ] = ooOooo000oOO ( 'connection' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No connection --" )
    if 42 - 42: i1iIi11iIIi1I
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = ooOooo000oOO ( 'notplayable' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No notplayable --" )
    if 19 - 19: o0OO0 % Iii1ii1II11i * iI11I1II1I1I + I11i11Ii
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = ooOooo000oOO ( 'noredirect' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No noredirect --" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'origin' ] = ooOooo000oOO ( 'origin' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No origin --" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'accept' ] = ooOooo000oOO ( 'accept' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No accept --" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = ooOooo000oOO ( 'includeheaders' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No includeheaders --" )
    if 46 - 46: i1iIi11iIIi1I
    if 1 - 1: o00
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'listrepeat' ] = ooOooo000oOO ( 'listrepeat' ) [ 0 ] . string
    if 97 - 97: Oo0ooO0oo0oO + o00 + o0o00Oo0O + Ii
   except :
    i1II1 ( "Regex: -- No listrepeat --" )
    if 77 - 77: IiiI / ii
    if 46 - 46: IiiI % iI11I1II1I1I . o00 % o00 + Ii
    if 72 - 72: iI11I1II1I1I * o00ooo0 % O0OOo / i11ii11iIi11i
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'proxy' ] = ooOooo000oOO ( 'proxy' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No proxy --" )
    if 35 - 35: O0OOo + ii1I % Iii1ii1II11i % I1i1iI1i + o0OO0
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = ooOooo000oOO ( 'x-req' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No x-req --" )
    if 17 - 17: ii1I
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'x-addr' ] = ooOooo000oOO ( 'x-addr' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No x-addr --" )
    if 21 - 21: i1iIi11iIIi1I
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = ooOooo000oOO ( 'x-forward' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No x-forward --" )
    if 29 - 29: I1i1iI1i / ooO0OO000o / O0OOo * Oo0ooO0oo0oO
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'agent' ] = ooOooo000oOO ( 'agent' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- No User Agent --" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'post' ] = ooOooo000oOO ( 'post' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- Not a post" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = ooOooo000oOO ( 'rawpost' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- Not a rawpost" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = ooOooo000oOO ( 'htmlunescape' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- Not a htmlunescape" )
    if 10 - 10: ooO00oOoo % Oo0oO0ooo * Oo0oO0ooo . I1i1iI1i / o00ooo0 % Oo0ooO0oo0oO
    if 49 - 49: i11ii11iIi11i / o0OO0 + o0o00Oo0O * IiiI
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = ooOooo000oOO ( 'readcookieonly' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- Not a readCookieOnly" )
    if 28 - 28: O0OOo + Ii / I1i1iI1i % oOoO0oo0OOOo % i1iIi11iIIi1I - o0o00Oo0O
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ooOooo000oOO ( 'cookiejar' ) [ 0 ] . string
    if not i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    i1II1 ( "Regex: -- Not a cookieJar" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = ooOooo000oOO ( 'setcookie' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- Not a setcookie" )
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = ooOooo000oOO ( 'appendcookie' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- Not a appendcookie" )
    if 54 - 54: ii1I + ooO0OO000o
   try :
    i1I [ ooOooo000oOO ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = ooOooo000oOO ( 'ignorecache' ) [ 0 ] . string
   except :
    i1II1 ( "Regex: -- no ignorecache" )
    if 83 - 83: Iii1ii1II11i - I11i11Ii + Oo0ooO0oo0oO
    if 5 - 5: o00ooo0
    if 46 - 46: Oo0oO0ooo
    if 45 - 45: O0OOo
    if 21 - 21: o0OO0 . ooO00oOoo . Oo0ooO0oo0oO / i1iIi11iIIi1I / ooO00oOoo
  i1I = urllib . quote ( repr ( i1I ) )
  return i1I
  if 17 - 17: Oo0ooO0oo0oO / Oo0ooO0oo0oO / I1i1iI1i
 except :
  i1I = None
  i1II1 ( 'regex Error: ' + iiIiI . encode ( 'utf-8' , 'ignore' ) )
  if 1 - 1: ii1I . Ii % Oo0ooO0oo0oO
  if 82 - 82: iI11I1II1I1I + i1iIi11iIIi1I . iI11I1II1I1I % Oo0oO0ooo / o00ooo0 . o00ooo0
def IIi ( url ) :
 try :
  for ooOooo000oOO in range ( 1 , 51 ) :
   oOoO00oo0O = IiiiI ( url )
   if "EXT-X-STREAM-INF" in oOoO00oo0O : return url
   if not "EXTM3U" in oOoO00oo0O : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 61 - 61: Oo0ooO0oo0oO % Oo0ooO0oo0oO * IiiI / IiiI
  if 75 - 75: Oo0oO0ooo . O0OOo
def iII111i ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
  if 87 - 87: Oo0ooO0oo0oO + O0OOo % Ii % o0o00Oo0O
  if 27 - 27: o0o00Oo0O
 OOO0oOOoo = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 if 52 - 52: IiiI % i1iIi11iIIi1I
 Oo000ooOOO = True
 for Ii11i1I11i in OOO0oOOoo :
  if Ii11i1I11i in regexs :
   if 13 - 13: Oo0oO0ooo / Ii % ooO0OO000o % I1i1iI1i . Iii1ii1II11i
   iIIIii = regexs [ Ii11i1I11i ]
   if 58 - 58: IiiI / Oo0oO0ooo . oOoO0oo0OOOo / ii + ooO00oOoo
   O0OoO0ooOO0o = False
   if 'cookiejar' in iIIIii :
    if 81 - 81: o0o00Oo0O * ooO0OO000o + I11i11Ii * Ii - Iii1ii1II11i / I11i11Ii
    O0OoO0ooOO0o = iIIIii [ 'cookiejar' ]
    if '$doregex' in O0OoO0ooOO0o :
     cookieJar = iII111i ( regexs , iIIIii [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     O0OoO0ooOO0o = True
    else :
     O0OoO0ooOO0o = True
     if 63 - 63: oOoO0oo0OOOo - ii % ooO00oOoo
   if O0OoO0ooOO0o :
    if cookieJar == None :
     if 77 - 77: i11ii11iIi11i . ii1I
     cookie_jar_file = None
     if 'open[' in iIIIii [ 'cookiejar' ] :
      cookie_jar_file = iIIIii [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 35 - 35: O0OOo * Oo0ooO0oo0oO . I1i1iI1i * IiiI . oOoO0oo0OOOo / o0o00Oo0O
      if 100 - 100: ooO00oOoo . IiiI * i1iIi11iIIi1I % o0o00Oo0O * o0o00Oo0O
     cookieJar = IIIii1 ( cookie_jar_file )
     if 71 - 71: ooO0OO000o / ii1I . Iii1ii1II11i % ii . oOoO0oo0OOOo
     if cookie_jar_file :
      Iiiiii111i1ii ( cookieJar , cookie_jar_file )
      if 25 - 25: Oo0ooO0oo0oO - O0OOo / Ii
      if 41 - 41: ii1I % o00 + iI11I1II1I1I
      if 2 - 2: iI11I1II1I1I * i1iIi11iIIi1I % o0OO0 - ooO0OO000o - o00
    elif 'save[' in iIIIii [ 'cookiejar' ] :
     cookie_jar_file = iIIIii [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     iIi11iiIiI1I = os . path . join ( O0O00o0OOO0 , cookie_jar_file )
     if 3 - 3: ii1I / ooO0OO000o / Ii * ii1I - ooO0OO000o
     Iiiiii111i1ii ( cookieJar , cookie_jar_file )
   if iIIIii [ 'page' ] and '$doregex' in iIIIii [ 'page' ] :
    IiiII1111III1I = iII111i ( regexs , iIIIii [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if len ( IiiII1111III1I ) == 0 :
     IiiII1111III1I = 'http://regexfailed'
    iIIIii [ 'page' ] = IiiII1111III1I
    if 39 - 39: ii1I / Oo0oO0ooo
   if 'setcookie' in iIIIii and iIIIii [ 'setcookie' ] and '$doregex' in iIIIii [ 'setcookie' ] :
    iIIIii [ 'setcookie' ] = iII111i ( regexs , iIIIii [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in iIIIii and iIIIii [ 'appendcookie' ] and '$doregex' in iIIIii [ 'appendcookie' ] :
    iIIIii [ 'appendcookie' ] = iII111i ( regexs , iIIIii [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 78 - 78: O0OOo
    if 53 - 53: O0OOo * Oo0ooO0oo0oO . o00 / o0o00Oo0O * O0OOo
   if 'post' in iIIIii and '$doregex' in iIIIii [ 'post' ] :
    iIIIii [ 'post' ] = iII111i ( regexs , iIIIii [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 22 - 22: i1iIi11iIIi1I % o00 * Iii1ii1II11i / Oo0ooO0oo0oO % Ii * I1i1iI1i
    if 95 - 95: ii - Oo0oO0ooo * I11i11Ii + oOoO0oo0OOOo
   if 'rawpost' in iIIIii and '$doregex' in iIIIii [ 'rawpost' ] :
    iIIIii [ 'rawpost' ] = iII111i ( regexs , iIIIii [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 10 - 10: IiiI / Ii
    if 92 - 92: I1i1iI1i . ooO00oOoo
   if 'rawpost' in iIIIii and '$epoctime$' in iIIIii [ 'rawpost' ] :
    iIIIii [ 'rawpost' ] = iIIIii [ 'rawpost' ] . replace ( '$epoctime$' , oO ( ) )
    if 92 - 92: Oo0oO0ooo * i1iIi11iIIi1I * i1iIi11iIIi1I * I11i11Ii . iI11I1II1I1I
   if 'rawpost' in iIIIii and '$epoctime2$' in iIIIii [ 'rawpost' ] :
    iIIIii [ 'rawpost' ] = iIIIii [ 'rawpost' ] . replace ( '$epoctime2$' , I1Ii1111iIi ( ) )
    if 31 - 31: I1i1iI1i . ooO00oOoo * O0OOo + Ii * o0OO0
    if 93 - 93: Iii1ii1II11i / iI11I1II1I1I * ii1I % ii * o0o00Oo0O * I1i1iI1i
   Ooooooo = ''
   if iIIIii [ 'page' ] and iIIIii [ 'page' ] in cachedPages and not 'ignorecache' in iIIIii and forCookieJarOnly == False :
    if 39 - 39: Oo0oO0ooo * i1iIi11iIIi1I + iI11I1II1I1I - Oo0oO0ooo + Oo0ooO0oo0oO
    Ooooooo = cachedPages [ iIIIii [ 'page' ] ]
   else :
    if iIIIii [ 'page' ] and not iIIIii [ 'page' ] == '' and iIIIii [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in iIIIii [ 'page' ] :
      iIIIii [ 'page' ] = iIIIii [ 'page' ] . replace ( '$epoctime$' , oO ( ) )
     if '$epoctime2$' in iIIIii [ 'page' ] :
      iIIIii [ 'page' ] = iIIIii [ 'page' ] . replace ( '$epoctime2$' , I1Ii1111iIi ( ) )
      if 69 - 69: o0o00Oo0O
      if 85 - 85: O0OOo / o0o00Oo0O
     iI1iIIIi1i = iIIIii [ 'page' ] . split ( '|' )
     ooo = iI1iIIIi1i [ 0 ]
     OooooO0oOO = None
     if len ( iI1iIIIi1i ) > 1 :
      OooooO0oOO = iI1iIIIi1i [ 1 ]
      if 30 - 30: ii - ii . o0o00Oo0O / o00
      if 31 - 31: Oo0ooO0oo0oO + IiiI . ii
      if 89 - 89: ooO0OO000o + ii1I + ooO0OO000o
      if 7 - 7: o0o00Oo0O % IiiI + Iii1ii1II11i * o00 - o00
      if 42 - 42: oOoO0oo0OOOo * oOoO0oo0OOOo * ooO00oOoo . I1i1iI1i
      if 51 - 51: Oo0ooO0oo0oO % iI11I1II1I1I - ii % O0OOo * iI11I1II1I1I % i11ii11iIi11i
      if 99 - 99: o0OO0 * ooO0OO000o * ooO00oOoo
      if 92 - 92: i1iIi11iIIi1I
      if 40 - 40: oOoO0oo0OOOo / Oo0oO0ooo
      if 79 - 79: i11ii11iIi11i - iI11I1II1I1I + o00ooo0 - ooO00oOoo
     OoOiIIiii = urllib2 . ProxyHandler ( urllib2 . getproxies ( ) )
     if 61 - 61: Oo0oO0ooo . ii1I / ooO00oOoo % Ii * o00
     if 31 - 31: Oo0ooO0oo0oO + o0o00Oo0O
     if 87 - 87: O0OOo
     O00oO = urllib2 . Request ( ooo )
     if 'proxy' in iIIIii :
      IIIii = iIIIii [ 'proxy' ]
      if 83 - 83: Oo0oO0ooo % IiiI % I11i11Ii . iI11I1II1I1I - Oo0oO0ooo
      if 88 - 88: ii
      if ooo [ : 5 ] == "https" :
       OO00 = urllib2 . ProxyHandler ( { 'https' : IIIii } )
       if 28 - 28: o0OO0 - Ii . Iii1ii1II11i + Oo0oO0ooo / Iii1ii1II11i
      else :
       OO00 = urllib2 . ProxyHandler ( { 'http' : IIIii } )
       if 35 - 35: Oo0oO0ooo
      OOoO0 = urllib2 . build_opener ( OO00 )
      urllib2 . install_opener ( OOoO0 )
      if 86 - 86: ooO0OO000o % Ii + o00ooo0 % Ii
      if 92 - 92: Ii - o00 / O0OOo / o0OO0
     O00oO . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     IIIii = None
     if 43 - 43: ooO0OO000o + Oo0ooO0oo0oO + o00
     if 'referer' in iIIIii :
      O00oO . add_header ( 'Referer' , iIIIii [ 'referer' ] )
     if 'accept' in iIIIii :
      O00oO . add_header ( 'Accept' , iIIIii [ 'accept' ] )
     if 'agent' in iIIIii :
      O00oO . add_header ( 'User-agent' , iIIIii [ 'agent' ] )
     if 'x-req' in iIIIii :
      O00oO . add_header ( 'X-Requested-With' , iIIIii [ 'x-req' ] )
     if 'x-addr' in iIIIii :
      O00oO . add_header ( 'x-addr' , iIIIii [ 'x-addr' ] )
     if 'x-forward' in iIIIii :
      O00oO . add_header ( 'X-Forwarded-For' , iIIIii [ 'x-forward' ] )
     if 'setcookie' in iIIIii :
      if 40 - 40: IiiI
      O00oO . add_header ( 'Cookie' , iIIIii [ 'setcookie' ] )
     if 'appendcookie' in iIIIii :
      if 67 - 67: o0OO0 + ooO0OO000o - o0o00Oo0O . o0OO0 * ooO0OO000o * I1i1iI1i
      o00OO00O0oOO = iIIIii [ 'appendcookie' ]
      o00OO00O0oOO = o00OO00O0oOO . split ( ';' )
      for Ii1iI111 in o00OO00O0oOO :
       O0oooo00o0Oo , I1iii = Ii1iI111 . split ( '=' )
       oO0o0O0Ooo0o , O0oooo00o0Oo = O0oooo00o0Oo . split ( ':' )
       i1Ii11II = cookielib . Cookie ( version = 0 , name = O0oooo00o0Oo , value = I1iii , port = None , port_specified = False , domain = oO0o0O0Ooo0o , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( i1Ii11II )
     if 'origin' in iIIIii :
      O00oO . add_header ( 'Origin' , iIIIii [ 'origin' ] )
     if OooooO0oOO :
      OooooO0oOO = OooooO0oOO . split ( '&' )
      for Ii1iI111 in OooooO0oOO :
       O0oooo00o0Oo , I1iii = Ii1iI111 . split ( '=' )
       O00oO . add_header ( O0oooo00o0Oo , I1iii )
       if 18 - 18: ooO0OO000o . ii % oOoO0oo0OOOo % o00ooo0
     if not cookieJar == None :
      if 9 - 9: i11ii11iIi11i - i1iIi11iIIi1I * ii . i1iIi11iIIi1I
      ii1Ii1IiIIi = urllib2 . HTTPCookieProcessor ( cookieJar )
      OOoO0 = urllib2 . build_opener ( ii1Ii1IiIIi , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      OOoO0 = urllib2 . install_opener ( OOoO0 )
      if 83 - 83: I1i1iI1i / Iii1ii1II11i
      if 34 - 34: I11i11Ii * i1iIi11iIIi1I * ooO00oOoo / i11ii11iIi11i * I1i1iI1i / iI11I1II1I1I
      if 'noredirect' in iIIIii :
       OOoO0 = urllib2 . build_opener ( ii1Ii1IiIIi , iI , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
       OOoO0 = urllib2 . install_opener ( OOoO0 )
     elif 'noredirect' in iIIIii :
      OOoO0 = urllib2 . build_opener ( iI , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      OOoO0 = urllib2 . install_opener ( OOoO0 )
      if 74 - 74: i1iIi11iIIi1I / Ii - ooO0OO000o * IiiI
      if 5 - 5: Oo0ooO0oo0oO - Oo0ooO0oo0oO . i1iIi11iIIi1I + oOoO0oo0OOOo - Oo0ooO0oo0oO . o0OO0
     if 'connection' in iIIIii :
      if 31 - 31: ooO0OO000o - iI11I1II1I1I - iI11I1II1I1I % I1i1iI1i
      from keepalive import HTTPHandler
      iii = HTTPHandler ( )
      OOoO0 = urllib2 . build_opener ( iii )
      urllib2 . install_opener ( OOoO0 )
      if 27 - 27: I1i1iI1i / Ii / ii1I + ooO00oOoo
      if 34 - 34: Oo0ooO0oo0oO
      if 91 - 91: iI11I1II1I1I % IiiI . iI11I1II1I1I % ii1I / ooO0OO000o * oOoO0oo0OOOo
     iioo0o0OoOOO = None
     if 88 - 88: o00
     if 'post' in iIIIii :
      iiI11I1i1i1iI = iIIIii [ 'post' ]
      if 60 - 60: ii % i1iIi11iIIi1I + Oo0ooO0oo0oO . O0OOo * iI11I1II1I1I
      if 93 - 93: i11ii11iIi11i
      if 5 - 5: I1i1iI1i / Oo0ooO0oo0oO
      if 77 - 77: O0OOo - I11i11Ii % I1i1iI1i - o0o00Oo0O
      o0O0O0 = iiI11I1i1i1iI . split ( ',' ) ;
      iioo0o0OoOOO = { }
      for I11 in o0O0O0 :
       O0oooo00o0Oo = I11 . split ( ':' ) [ 0 ] ;
       I1iii = I11 . split ( ':' ) [ 1 ] ;
       iioo0o0OoOOO [ O0oooo00o0Oo ] = I1iii
      iioo0o0OoOOO = urllib . urlencode ( iioo0o0OoOOO )
      if 87 - 87: oOoO0oo0OOOo
     if 'rawpost' in iIIIii :
      iioo0o0OoOOO = iIIIii [ 'rawpost' ]
      if 25 - 25: ii1I . i11ii11iIi11i - oOoO0oo0OOOo / i11ii11iIi11i % i11ii11iIi11i * iI11I1II1I1I
      if 50 - 50: i11ii11iIi11i . Ii - o0OO0 . o0OO0
      if 31 - 31: Oo0ooO0oo0oO / i1iIi11iIIi1I * ii1I . oOoO0oo0OOOo
      if 57 - 57: Oo0ooO0oo0oO + iI11I1II1I1I % ii1I % I11i11Ii
     Ooooooo = ''
     try :
      if 83 - 83: IiiI / Ii % iI11I1II1I1I . I1i1iI1i % o0OO0 . ii
      if iioo0o0OoOOO :
       I11i1I1I = urllib2 . urlopen ( O00oO , iioo0o0OoOOO )
      else :
       I11i1I1I = urllib2 . urlopen ( O00oO )
      if I11i1I1I . info ( ) . get ( 'Content-Encoding' ) == 'gzip' :
       from StringIO import StringIO
       import gzip
       o00oO00 = StringIO ( I11i1I1I . read ( ) )
       OO0oOOo = gzip . GzipFile ( fileobj = o00oO00 )
       Ooooooo = OO0oOOo . read ( )
      else :
       Ooooooo = I11i1I1I . read ( )
       if 94 - 94: IiiI + ii * I1i1iI1i - i1iIi11iIIi1I . Oo0oO0ooo - IiiI
       if 39 - 39: o00ooo0 * O0OOo / oOoO0oo0OOOo * i11ii11iIi11i . I1i1iI1i % ooO0OO000o
       if 71 - 71: ooO00oOoo % ii1I - ooO0OO000o - Oo0ooO0oo0oO + Oo0ooO0oo0oO * O0OOo
      if 'proxy' in iIIIii and not OoOiIIiii is None :
       urllib2 . install_opener ( urllib2 . build_opener ( OoOiIIiii ) )
       if 51 - 51: iI11I1II1I1I / oOoO0oo0OOOo + Oo0ooO0oo0oO - I1i1iI1i + o00
      Ooooooo = IIii1i1iii1 ( Ooooooo )
      if 70 - 70: Ii % o00
      if 11 - 11: Oo0oO0ooo % Iii1ii1II11i % o00ooo0 / ooO0OO000o % ooO00oOoo - i1iIi11iIIi1I
      if 'includeheaders' in iIIIii :
       if 96 - 96: Iii1ii1II11i / ooO0OO000o . o00ooo0 - o00 * I1i1iI1i * o0OO0
       Ooooooo += '$$HEADERS_START$$:'
       for Oo0oO in I11i1I1I . headers :
        Ooooooo += Oo0oO + ':' + I11i1I1I . headers . get ( Oo0oO ) + '\n'
       Ooooooo += '$$HEADERS_END$$:'
       if 76 - 76: o00ooo0 - ooO0OO000o * Oo0ooO0oo0oO / ii
      i1II1 ( Ooooooo )
      i1II1 ( cookieJar )
      if 18 - 18: i11ii11iIi11i + iI11I1II1I1I - ooO0OO000o - I11i11Ii
      I11i1I1I . close ( )
     except :
      pass
     cachedPages [ iIIIii [ 'page' ] ] = Ooooooo
     if 71 - 71: ii
     if 33 - 33: ooO00oOoo
     if 62 - 62: Iii1ii1II11i + o00ooo0 + ii1I / ii
     if forCookieJarOnly :
      return cookieJar
    elif iIIIii [ 'page' ] and not iIIIii [ 'page' ] . startswith ( 'http' ) :
     if iIIIii [ 'page' ] . startswith ( '$pyFunction:' ) :
      IIiiii = iI111i1I1II ( iIIIii [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar , iIIIii )
      if forCookieJarOnly :
       return cookieJar
      Ooooooo = IIiiii
      Ooooooo = IIii1i1iii1 ( Ooooooo )
     else :
      Ooooooo = iIIIii [ 'page' ]
   if '$pyFunction:playmedia(' in iIIIii [ 'expres' ] or 'ActivateWindow' in iIIIii [ 'expres' ] or '$PLAYERPROXY$=' in url or any ( x in url for x in II ) :
    Oo000ooOOO = False
   if '$doregex' in iIIIii [ 'expres' ] :
    iIIIii [ 'expres' ] = iII111i ( regexs , iIIIii [ 'expres' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if not iIIIii [ 'expres' ] == '' :
    if 96 - 96: ooO00oOoo / i1iIi11iIIi1I * ooO0OO000o - o00 * i1iIi11iIIi1I
    if '$LiveStreamCaptcha' in iIIIii [ 'expres' ] :
     IIiiii = o0 ( iIIIii , Ooooooo , cookieJar )
     if 20 - 20: ii * IiiI * o0o00Oo0O . Oo0ooO0oo0oO
     url = url . replace ( "$doregex[" + Ii11i1I11i + "]" , IIiiii )
     if 78 - 78: iI11I1II1I1I + I1i1iI1i - o00ooo0 * ooO00oOoo - ii % oOoO0oo0OOOo
    elif iIIIii [ 'expres' ] . startswith ( '$pyFunction:' ) or '#$pyFunction' in iIIIii [ 'expres' ] :
     if 34 - 34: o0o00Oo0O
     IIiiii = ''
     if iIIIii [ 'expres' ] . startswith ( '$pyFunction:' ) :
      IIiiii = iI111i1I1II ( iIIIii [ 'expres' ] . split ( '$pyFunction:' ) [ 1 ] , Ooooooo , cookieJar , iIIIii )
     else :
      IIiiii = OooOOOo0 ( iIIIii [ 'expres' ] , Ooooooo , cookieJar , iIIIii )
     if 'ActivateWindow' in iIIIii [ 'expres' ] : return
     if 54 - 54: o00ooo0 - I1i1iI1i - ooO00oOoo . iI11I1II1I1I
     if 79 - 79: o00ooo0 . i11ii11iIi11i
     if 40 - 40: IiiI + i1iIi11iIIi1I . IiiI % O0OOo
     try :
      url = url . replace ( u"$doregex[" + Ii11i1I11i + "]" , IIiiii )
     except : url = url . replace ( "$doregex[" + Ii11i1I11i + "]" , IIiiii . decode ( "utf-8" ) )
    else :
     if 'listrepeat' in iIIIii :
      I11I1IIiiII1 = iIIIii [ 'listrepeat' ]
      IIIIIii1ii11 = re . findall ( iIIIii [ 'expres' ] , Ooooooo )
      return I11I1IIiiII1 , IIIIIii1ii11 , iIIIii , regexs
      if 86 - 86: oOoO0oo0OOOo * ooO0OO000o - o0o00Oo0O . oOoO0oo0OOOo % iI11I1II1I1I / Oo0ooO0oo0oO
     IIiiii = ''
     if not Ooooooo == '' :
      if 11 - 11: I11i11Ii * o0OO0 + Iii1ii1II11i / Iii1ii1II11i
      iiii1I1 = re . compile ( iIIIii [ 'expres' ] ) . search ( Ooooooo )
      try :
       IIiiii = iiii1I1 . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
      if iIIIii [ 'page' ] == '' :
       IIiiii = iIIIii [ 'expres' ]
       if 14 - 14: oOoO0oo0OOOo * I11i11Ii + ii - o00 - Oo0oO0ooo
     if rawPost :
      if 15 - 15: Oo0oO0ooo / o0o00Oo0O . IiiI . Ii
      IIiiii = urllib . quote_plus ( IIiiii )
     if 'htmlunescape' in iIIIii :
      if 59 - 59: ooO00oOoo - IiiI - O0OOo
      import HTMLParser
      IIiiii = HTMLParser . HTMLParser ( ) . unescape ( IIiiii )
     try :
      url = url . replace ( "$doregex[" + Ii11i1I11i + "]" , IIiiii )
     except : url = url . replace ( "$doregex[" + Ii11i1I11i + "]" , IIiiii . decode ( "utf-8" ) )
     if 48 - 48: ii1I + I1i1iI1i % oOoO0oo0OOOo / i1iIi11iIIi1I - IiiI
     if 67 - 67: o0OO0 % IiiI . ii + Oo0ooO0oo0oO * I1i1iI1i * oOoO0oo0OOOo
   else :
    url = url . replace ( "$doregex[" + Ii11i1I11i + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , oO ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , I1Ii1111iIi ( ) )
  if 36 - 36: o0o00Oo0O + i1iIi11iIIi1I
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , iIIIi1i1I11i ( cookieJar ) )
  if 55 - 55: i1iIi11iIIi1I - Oo0ooO0oo0oO
 if recursiveCall : return url
 if 84 - 84: ooO00oOoo + i1iIi11iIIi1I - oOoO0oo0OOOo * oOoO0oo0OOOo
 if url == "" :
  return
 else :
  return url , Oo000ooOOO
  if 61 - 61: ii . o0OO0 . ii / i1iIi11iIIi1I
  if 72 - 72: ii1I
def OOoo0oo ( t ) :
 import hashlib
 Ii1iI111 = hashlib . md5 ( )
 Ii1iI111 . update ( t )
 return Ii1iI111 . hexdigest ( )
 if 58 - 58: o0OO0
 if 4 - 4: ooO0OO000o . O0OOo / Iii1ii1II11i - Ii
def OoO00 ( encrypted ) :
 I11iIi1II = ""
 if 60 - 60: iI11I1II1I1I + ii1I
 if 86 - 86: iI11I1II1I1I + oOoO0oo0OOOo . Ii - o00ooo0
 if 51 - 51: oOoO0oo0OOOo
 if 14 - 14: Oo0oO0ooo % o0OO0 % i1iIi11iIIi1I - Ii
 if 53 - 53: o00ooo0 % i1iIi11iIIi1I
 if 59 - 59: Oo0ooO0oo0oO % iI11I1II1I1I . ii1I + ooO0OO000o * Oo0oO0ooo
def i1IiiI1iIi ( media_url ) :
 try :
  import CustomPlayer
  oOOo00O0OOOo = CustomPlayer . MyXBMCPlayer ( )
  i11I1I1iiI = xbmcgui . ListItem ( label = str ( iiIiI ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  oOOo00O0OOOo . play ( media_url , i11I1I1iiI )
  xbmc . sleep ( 1000 )
  while oOOo00O0OOOo . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 34 - 34: I1i1iI1i % O0OOo . o0o00Oo0O . iI11I1II1I1I
 if 93 - 93: ii1I . Ii . i1iIi11iIIi1I
def O0O00OOo ( params ) :
 oO0Oo = json . dumps ( params )
 OoOOo = xbmc . executeJSONRPC ( oO0Oo )
 if 17 - 17: ii1I
 try :
  I11i1I1I = json . loads ( OoOOo )
 except UnicodeDecodeError :
  I11i1I1I = json . loads ( OoOOo . decode ( 'utf-8' , 'ignore' ) )
  if 1 - 1: O0OOo
 try :
  if 'result' in I11i1I1I :
   return I11i1I1I [ 'result' ]
  return None
 except KeyError :
  logger . warn ( "[%s] %s" % ( params [ 'method' ] , I11i1I1I [ 'error' ] [ 'message' ] ) )
  return None
  if 78 - 78: Iii1ii1II11i + I1i1iI1i - o0o00Oo0O
  if 10 - 10: ooO00oOoo % I11i11Ii
def oo0OoOooo ( proxysettings = None ) :
 if 95 - 95: Oo0oO0ooo * Iii1ii1II11i % O0OOo % o00ooo0 - o00ooo0
 if proxysettings == None :
  if 97 - 97: Iii1ii1II11i + iI11I1II1I1I . o0o00Oo0O
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":false}, "id":1}' )
 else :
  if 64 - 64: ii1I % O0OOo / Ii - ii1I % Oo0ooO0oo0oO . o00
  II1i111 = proxysettings . split ( ':' )
  i1iiiIii11 = II1i111 [ 0 ]
  OOoOOO000O0 = II1i111 [ 1 ]
  oOo0 = II1i111 [ 2 ]
  II1i11I1 = None
  iiIiIiII = None
  if 37 - 37: I1i1iI1i / Oo0oO0ooo + ooO0OO000o
  if len ( II1i111 ) > 3 and '@' in II1i111 [ 3 ] :
   II1i11I1 = II1i111 [ 3 ] . split ( '@' ) [ 0 ]
   iiIiIiII = II1i111 [ 3 ] . split ( '@' ) [ 1 ]
   if 18 - 18: Iii1ii1II11i
   if 23 - 23: ooO0OO000o
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":true}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxytype", "value":' + str ( oOo0 ) + '}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyserver", "value":"' + str ( i1iiiIii11 ) + '"}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyport", "value":' + str ( OOoOOO000O0 ) + '}, "id":1}' )
  if 24 - 24: iI11I1II1I1I + iI11I1II1I1I * o00
  if 18 - 18: o00 * I1i1iI1i - o00ooo0
  if not II1i11I1 == None :
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyusername", "value":"' + str ( II1i11I1 ) + '"}, "id":1}' )
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxypassword", "value":"' + str ( iiIiIiII ) + '"}, "id":1}' )
   if 31 - 31: i1iIi11iIIi1I - o0o00Oo0O % oOoO0oo0OOOo % o0OO0
   if 45 - 45: Iii1ii1II11i + ooO0OO000o * Ii
def IiIIi1I1I11Ii ( ) :
 o0OO = O0O00OOo ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.usehttpproxy" } , 'id' : 1 } ) [ 'value' ]
 if 58 - 58: ii . I11i11Ii / ooO0OO000o / ooO0OO000o - Oo0oO0ooo + i1iIi11iIIi1I
 oOo0 = O0O00OOo ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxytype" } , 'id' : 1 } ) [ 'value' ]
 if 59 - 59: ii + I1i1iI1i . ooO00oOoo - o0o00Oo0O % iI11I1II1I1I / o0o00Oo0O
 if o0OO :
  i1iiiIii11 = O0O00OOo ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyserver" } , 'id' : 1 } ) [ 'value' ]
  OOoOOO000O0 = unicode ( O0O00OOo ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyport" } , 'id' : 1 } ) [ 'value' ] )
  II1i11I1 = O0O00OOo ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyusername" } , 'id' : 1 } ) [ 'value' ]
  iiIiIiII = O0O00OOo ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxypassword" } , 'id' : 1 } ) [ 'value' ]
  if 88 - 88: i1iIi11iIIi1I . o0o00Oo0O % ii / Oo0ooO0oo0oO
  if II1i11I1 and iiIiIiII and i1iiiIii11 and OOoOOO000O0 :
   return i1iiiIii11 + ':' + str ( OOoOOO000O0 ) + ':' + str ( oOo0 ) + ':' + II1i11I1 + '@' + iiIiIiII
  elif i1iiiIii11 and OOoOOO000O0 :
   return i1iiiIii11 + ':' + str ( OOoOOO000O0 ) + ':' + str ( oOo0 )
 else :
  return None
  if 89 - 89: ooO0OO000o / o0OO0
  if 14 - 14: Oo0ooO0oo0oO . I11i11Ii * O0OOo + ooO0OO000o - O0OOo + Oo0ooO0oo0oO
def IIIIIiII1 ( media_url , name , iconImage , proxyip , port , proxyuser = None , proxypass = None ) :
 if 45 - 45: I11i11Ii / o00 . o00
 i1oO = xbmcgui . DialogProgress ( )
 i1oO . create ( 'Progress' , 'Playing with custom proxy' )
 i1oO . update ( 10 , "" , "setting proxy.." , "" )
 iIIi1IIi = False
 i111i11I1ii = ''
 if 64 - 64: o0OO0 / Ii / IiiI . ii
 try :
  if 11 - 11: I1i1iI1i % ii1I
  i111i11I1ii = IiIIi1I1I11Ii ( )
  print 'existing_proxy' , i111i11I1ii
  if 16 - 16: I11i11Ii + O0OOo % oOoO0oo0OOOo
  if 80 - 80: O0OOo * o0o00Oo0O
  if not proxyuser == None :
   oo0OoOooo ( proxyip + ':' + port + ':0:' + proxyuser + '@' + proxypass )
  else :
   oo0OoOooo ( proxyip + ':' + port + ':0' )
   if 78 - 78: oOoO0oo0OOOo
   if 20 - 20: o00 % o00ooo0 . o00ooo0 / I1i1iI1i + oOoO0oo0OOOo . o00ooo0
  iIIi1IIi = True
  i1oO . update ( 80 , "" , "setting proxy complete, now playing" , "" )
  if 53 - 53: Oo0ooO0oo0oO + I11i11Ii / Ii - IiiI * o0OO0 / ii
  i1oO . close ( )
  i1oO = None
  import CustomPlayer
  oOOo00O0OOOo = CustomPlayer . MyXBMCPlayer ( )
  i11I1I1iiI = xbmcgui . ListItem ( label = str ( name ) , iconImage = iconImage , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  oOOo00O0OOOo . play ( media_url , i11I1I1iiI )
  xbmc . sleep ( 1000 )
  while oOOo00O0OOOo . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 if i1oO :
  i1oO . close ( )
 if iIIi1IIi :
  if 89 - 89: iI11I1II1I1I / I11i11Ii - ooO0OO000o / o00ooo0 . Ii . o00ooo0
  oo0OoOooo ( i111i11I1ii )
  if 48 - 48: o0o00Oo0O + o0o00Oo0O . ooO00oOoo - O0OOo
 return ''
 if 63 - 63: o0OO0
 if 71 - 71: ii1I . o00ooo0 * o00 % ii + Oo0ooO0oo0oO
def iIIi1iiI1i11 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  oooiIii11i1I = page_value
  page_value = IiiiI ( page_value , headers = referer )
  if 54 - 54: oOoO0oo0OOOo - o0OO0 - I11i11Ii
 oo0o0oOo = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 58 - 58: IiiI - ooO0OO000o % o0OO0 + ooO00oOoo . oOoO0oo0OOOo / Oo0oO0ooo
 IIo00ooo = re . compile ( oo0o0oOo ) . findall ( page_value )
 Ii1IiIiIi1IiI = ""
 if IIo00ooo and len ( IIo00ooo ) > 0 :
  for I1iii in IIo00ooo :
   i1iiIIi1I = iiI1I1IIi11i1 ( I1iii )
   i1II1iii1i = iIOO0O000 ( i1iiIIi1I , '\'(.*?)\'' )
   if 'unescape' in i1iiIIi1I :
    i1iiIIi1I = urllib . unquote ( i1II1iii1i )
   Ii1IiIiIi1IiI += i1iiIIi1I + '\n'
   if 83 - 83: Iii1ii1II11i / ooO00oOoo - Ii . iI11I1II1I1I + i1iIi11iIIi1I
   if 59 - 59: o0o00Oo0O % i1iIi11iIIi1I
  oooiIii11i1I = iIOO0O000 ( Ii1IiIiIi1IiI , 'src="(.*?)"' )
  if 92 - 92: o00ooo0 % o00 / Iii1ii1II11i % Iii1ii1II11i * I11i11Ii
  page_value = IiiiI ( oooiIii11i1I , headers = referer )
  if 74 - 74: o0o00Oo0O . I11i11Ii % i11ii11iIi11i % Oo0oO0ooo
  if 87 - 87: o0OO0 - Ii
  if 78 - 78: Ii / iI11I1II1I1I - IiiI
 iIIIIiiIii = iIOO0O000 ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 ooO0oo = iIOO0O000 ( page_value , 'file\',\s\'(.*?)\'' )
 if 56 - 56: ii - I1i1iI1i - ii1I
 if 8 - 8: ooO00oOoo / Oo0ooO0oo0oO . I11i11Ii + Iii1ii1II11i / Ii
 return iIIIIiiIii + ' playpath=' + ooO0oo + ' pageUrl=' + oooiIii11i1I
 if 31 - 31: O0OOo - iI11I1II1I1I + o00 . i1iIi11iIIi1I / Oo0oO0ooo % iI11I1II1I1I
 if 6 - 6: Oo0oO0ooo * Ii % iI11I1II1I1I % Ii + IiiI / ii1I
def o0o0oOO ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = IiiiI ( page_value , headers = referer )
 oo0o0oOo = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 IIo00ooo = re . compile ( oo0o0oOo ) . findall ( page_value ) [ 0 ]
 if 5 - 5: o00ooo0 / o0OO0
 III1i1IiI1i , Oo0oO , IiII1iiI , iII , OO0oOOo , I1iii = ( IIo00ooo )
 OO0oOOo = int ( OO0oOOo )
 III1i1IiI1i = int ( III1i1IiI1i ) / OO0oOOo
 Oo0oO = int ( Oo0oO ) / OO0oOOo
 IiII1iiI = int ( IiII1iiI ) / OO0oOOo
 iII = int ( iII ) / OO0oOOo
 if 63 - 63: IiiI * o00
 IIIIIii1ii11 = 'rtmp://' + str ( III1i1IiI1i ) + '.' + str ( Oo0oO ) + '.' + str ( IiII1iiI ) + '.' + str ( iII ) + I1iii ;
 return IIIIIii1ii11
 if 63 - 63: o00 * Iii1ii1II11i . ii / Oo0ooO0oo0oO * i1iIi11iIIi1I . O0OOo
 if 62 - 62: ii1I / O0OOo . I11i11Ii * IiiI
def i11i1Ii1 ( url , useragent = None ) :
 str = '#EXTM3U'
 str += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 str += '\n' + url + '&bytes=0-200000'
 oO0o0O0OOOoo0 = os . path . join ( O0O00o0OOO0 , 'testfile.m3u' )
 str += '\n'
 o0oO0oo0000OO ( oO0o0O0OOOoo0 , str )
 if 45 - 45: ooO00oOoo * o00ooo0 / ii . o0OO0 % Iii1ii1II11i / ii1I
 return oO0o0O0OOOoo0
 if 24 - 24: Oo0ooO0oo0oO + IiiI + I1i1iI1i - Oo0oO0ooo + oOoO0oo0OOOo
 if 14 - 14: o00ooo0 . Ii
def o0oO0oo0000OO ( file_name , page_data , append = False ) :
 if append :
  OO0oOOo = open ( file_name , 'a' )
  OO0oOOo . write ( page_data )
  OO0oOOo . close ( )
 else :
  OO0oOOo = open ( file_name , 'wb' )
  OO0oOOo . write ( page_data )
  OO0oOOo . close ( )
  return ''
  if 27 - 27: O0OOo % o0o00Oo0O % ooO00oOoo
  if 99 - 99: I11i11Ii + ii1I + Ii + i1iIi11iIIi1I % o0OO0 / I1i1iI1i
def O0OO0o0OO0OO ( file_name ) :
 OO0oOOo = open ( file_name , 'rb' )
 iII = OO0oOOo . read ( )
 OO0oOOo . close ( )
 return iII
 if 64 - 64: ooO0OO000o
 if 40 - 40: oOoO0oo0OOOo % i11ii11iIi11i
def oo0O0o00 ( page_data ) :
 import re , base64 , urllib ;
 oOoO0o = page_data
 while 'geh(' in oOoO0o :
  if oOoO0o . startswith ( 'lol(' ) : oOoO0o = oOoO0o [ 5 : - 1 ]
  if 46 - 46: ooO00oOoo % o00ooo0
  oOoO0o = re . compile ( '"(.*?)"' ) . findall ( oOoO0o ) [ 0 ] ;
  oOoO0o = base64 . b64decode ( oOoO0o ) ;
  oOoO0o = urllib . unquote ( oOoO0o ) ;
 print oOoO0o
 return oOoO0o
 if 72 - 72: iI11I1II1I1I
 if 45 - 45: i1iIi11iIIi1I - IiiI % ooO00oOoo
def i1IIi1i1Ii1 ( page_data ) :
 if 45 - 45: iI11I1II1I1I . o0OO0 / oOoO0oo0OOOo / Oo0oO0ooo
 ooOOOoOoOOO0 = IiiiI ( page_data ) ;
 ii111i1iI = '(http.*)'
 import uuid
 I1I1iII1i = str ( uuid . uuid1 ( ) ) . upper ( )
 iiIIii = re . compile ( ii111i1iI ) . findall ( ooOOOoOoOOO0 )
 oO0Oo0O0 = [ ( 'X-Playback-Session-Id' , I1I1iII1i ) ]
 for I1iIiI1IiIIII in iiIIii :
  try :
   I1iiIi111I = IiiiI ( I1iIiI1IiIIII , headers = oO0Oo0O0 ) ;
   if 34 - 34: Ii - ooO0OO000o / I11i11Ii % IiiI
  except : pass
  if 33 - 33: Oo0ooO0oo0oO
 return page_data + '|&X-Playback-Session-Id=' + I1I1iII1i
 if 35 - 35: Ii - I11i11Ii / Oo0ooO0oo0oO + o00ooo0 * o0OO0
 if 49 - 49: IiiI * o00ooo0 + I1i1iI1i + o00
def IIi11 ( page_data ) :
 if 89 - 89: ooO0OO000o * O0OOo . o0OO0
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  oO0Oo0O0 = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = IiiiI ( page_data , headers = oO0Oo0O0 ) ;
  if 85 - 85: Iii1ii1II11i + o00ooo0 * I11i11Ii % Ii
 if '127.0.0.1' in page_data :
  return iI1i ( page_data )
 elif iIOO0O000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  i11IiIIi11I = iIOO0O000 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + iIOO0O000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + iIOO0O000 ( page_data , '\\?y=([^&]+)&' )
 else :
  i11IiIIi11I = iIOO0O000 ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( i11IiIIi11I ) == 0 :
   i11IiIIi11I = page_data
 i11IiIIi11I = i11IiIIi11I . replace ( ' ' , '%20' )
 return i11IiIIi11I
 if 78 - 78: Oo0oO0ooo
 if 83 - 83: iI11I1II1I1I % oOoO0oo0OOOo % IiiI % ooO00oOoo . Iii1ii1II11i % o0o00Oo0O
def iIOO0O000 ( data , re_patten ) :
 oOOo0 = ''
 iIIIii = re . search ( re_patten , data )
 if iIIIii != None :
  oOOo0 = iIIIii . group ( 1 )
 else :
  oOOo0 = ''
 return oOOo0
 if 47 - 47: IiiI
 if 66 - 66: I11i11Ii - Oo0oO0ooo
def iI1i ( page_data ) :
 i11IiIIi11I = ''
 if '127.0.0.1' in page_data :
  i11IiIIi11I = iIOO0O000 ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + iIOO0O000 ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 33 - 33: I11i11Ii / i11ii11iIi11i
 if iIOO0O000 ( page_data , 'token=([^&]+)&' ) != '' :
  i11IiIIi11I = i11IiIIi11I + '?token=' + iIOO0O000 ( page_data , 'token=([^&]+)&' )
 elif iIOO0O000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  i11IiIIi11I = iIOO0O000 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + iIOO0O000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + iIOO0O000 ( page_data , '\\?y=([^&]+)&' )
 else :
  i11IiIIi11I = iIOO0O000 ( page_data , 'HREF="([^"]+)"' )
  if 12 - 12: ooO0OO000o
 if 'dag1.asx' in i11IiIIi11I :
  return IIi11 ( i11IiIIi11I )
  if 2 - 2: ii1I - I11i11Ii + I1i1iI1i . ooO0OO000o
 if 'devinlivefs.fplive.net' not in i11IiIIi11I :
  i11IiIIi11I = i11IiIIi11I . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in i11IiIIi11I :
  i11IiIIi11I = i11IiIIi11I . replace ( 'permlive' , 'flive' )
 return i11IiIIi11I
 if 25 - 25: o0OO0
 if 34 - 34: oOoO0oo0OOOo . iI11I1II1I1I % o0o00Oo0O
def iI11Ii111 ( str_eval ) :
 OOo00OO00Oo = ""
 try :
  I1I1I11Ii = "w,i,s,e=(" + str_eval + ')'
  exec ( I1I1I11Ii )
  OOo00OO00Oo = ii1Iii1 ( w , ooOooo000oOO , oOoO0o , e )
 except : traceback . print_exc ( file = sys . stdout )
 if 80 - 80: o00ooo0 - IiiI
 return OOo00OO00Oo
 if 41 - 41: IiiI - i1iIi11iIIi1I * I11i11Ii
 if 82 - 82: i11ii11iIi11i % IiiI % Oo0ooO0oo0oO / o0o00Oo0O
def ii1Iii1 ( w , i , s , e ) :
 OOOO0o0 = 0 ;
 i1IIIi111Ii = 0 ;
 iIIi1iI1 = 0 ;
 I1Iii1I = [ ] ;
 iIi11I = [ ] ;
 while True :
  if ( OOOO0o0 < 5 ) :
   iIi11I . append ( w [ OOOO0o0 ] )
  elif ( OOOO0o0 < len ( w ) ) :
   I1Iii1I . append ( w [ OOOO0o0 ] ) ;
  OOOO0o0 += 1 ;
  if ( i1IIIi111Ii < 5 ) :
   iIi11I . append ( i [ i1IIIi111Ii ] )
  elif ( i1IIIi111Ii < len ( i ) ) :
   I1Iii1I . append ( i [ i1IIIi111Ii ] )
  i1IIIi111Ii += 1 ;
  if ( iIIi1iI1 < 5 ) :
   iIi11I . append ( s [ iIIi1iI1 ] )
  elif ( iIIi1iI1 < len ( s ) ) :
   I1Iii1I . append ( s [ iIIi1iI1 ] ) ;
  iIIi1iI1 += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( I1Iii1I ) + len ( iIi11I ) + len ( e ) ) :
   break ;
   if 87 - 87: I1i1iI1i / I11i11Ii + i1iIi11iIIi1I + Oo0ooO0oo0oO - ii + i1iIi11iIIi1I
 O00i1 = '' . join ( I1Iii1I )
 iiIII1IIiIIII = '' . join ( iIi11I )
 i1IIIi111Ii = 0 ;
 I1iIIII1 = [ ] ;
 for OOOO0o0 in range ( 0 , len ( I1Iii1I ) , 2 ) :
  if 57 - 57: oOoO0oo0OOOo . iI11I1II1I1I % O0OOo % o00ooo0 * oOoO0oo0OOOo
  II1 = - 1 ;
  if ( ord ( iiIII1IIiIIII [ i1IIIi111Ii ] ) % 2 ) :
   II1 = 1 ;
   if 97 - 97: o0OO0
  I1iIIII1 . append ( chr ( int ( O00i1 [ OOOO0o0 : OOOO0o0 + 2 ] , 36 ) - II1 ) ) ;
  i1IIIi111Ii += 1 ;
  if ( i1IIIi111Ii >= len ( iIi11I ) ) :
   i1IIIi111Ii = 0 ;
 IIIIIii1ii11 = '' . join ( I1iIIII1 )
 if 'eval(function(w,i,s,e)' in IIIIIii1ii11 :
  if 80 - 80: I11i11Ii . o00ooo0
  IIIIIii1ii11 = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( IIIIIii1ii11 ) [ 0 ]
  return iI11Ii111 ( IIIIIii1ii11 )
 else :
  if 47 - 47: I1i1iI1i + O0OOo + ooO0OO000o % Ii
  return IIIIIii1ii11
  if 93 - 93: Iii1ii1II11i % oOoO0oo0OOOo . o0o00Oo0O / o00 * o0OO0
  if 29 - 29: IiiI
def iiI1I1IIi11i1 ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  oo0 = None
  if page_value . startswith ( "http" ) :
   page_value = IiiiI ( page_value )
   if 2 - 2: ii
  if regex_for_text and len ( regex_for_text ) > 0 :
   try :
    page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   except : return 'NOTPACKED'
   if 60 - 60: i11ii11iIi11i
  page_value = oO00Ooo0oO ( page_value , iterations , total_iteration )
 except :
  page_value = 'UNPACKEDFAILED'
  traceback . print_exc ( file = sys . stdout )
  if 100 - 100: i11ii11iIi11i / ii1I - I11i11Ii % o00ooo0 - iI11I1II1I1I
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  if 17 - 17: I1i1iI1i / IiiI % i1iIi11iIIi1I
 return page_value
 if 71 - 71: Oo0oO0ooo . ooO00oOoo . i11ii11iIi11i
 if 68 - 68: Ii % o0OO0 * i11ii11iIi11i * Oo0oO0ooo * ooO0OO000o + o0o00Oo0O
def oO00Ooo0oO ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 if 66 - 66: I1i1iI1i % Iii1ii1II11i % ii
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  II11 = sJavascript . split ( 'var _0xcb8a=' )
  I1I1I11Ii = "myarray=" + II11 [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( I1I1I11Ii )
  iIi = 62
  iiO0O0o0oO0O00 = int ( II11 [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  o0O0oO0 = myarray [ 0 ]
  oo0i1 = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as i1IiIi1 :
   i1IiIi1 . write ( str ( oo0i1 ) )
   if 22 - 22: I1i1iI1i * o0o00Oo0O . ooO0OO000o - i11ii11iIi11i
 else :
  if 90 - 90: o0OO0
  if "rn p}('" in sJavascript :
   II11 = sJavascript . split ( "rn p}('" )
  else :
   II11 = sJavascript . split ( "rn A}('" )
   if 94 - 94: I1i1iI1i / Iii1ii1II11i * ooO00oOoo - oOoO0oo0OOOo
   if 44 - 44: o00ooo0 % Ii - o00 * Iii1ii1II11i + i1iIi11iIIi1I * Oo0ooO0oo0oO
  o0O0oO0 , iIi , iiO0O0o0oO0O00 , oo0i1 = ( '' , '0' , '0' , '' )
  if 41 - 41: o0o00Oo0O * O0OOo - oOoO0oo0OOOo . o00ooo0
  I1I1I11Ii = "p1,a1,c1,k1=('" + II11 [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( I1I1I11Ii )
 oo0i1 = oo0i1 . split ( '|' )
 II11 = II11 [ 1 ] . split ( "))'" )
 if 65 - 65: i1iIi11iIIi1I . ii
 if 70 - 70: i1iIi11iIIi1I - o0OO0 . iI11I1II1I1I % I1i1iI1i / oOoO0oo0OOOo - o0o00Oo0O
 if 55 - 55: o00 - i11ii11iIi11i
 if 100 - 100: o0o00Oo0O
 if 79 - 79: iI11I1II1I1I
 if 81 - 81: Oo0ooO0oo0oO + iI11I1II1I1I * ooO00oOoo - iI11I1II1I1I . Oo0ooO0oo0oO
 if 48 - 48: I1i1iI1i . ii . I11i11Ii . oOoO0oo0OOOo % Iii1ii1II11i / o00
 if 11 - 11: ii1I % i11ii11iIi11i % o00
 if 99 - 99: O0OOo / iI11I1II1I1I - o00ooo0 * Iii1ii1II11i % I11i11Ii
 if 13 - 13: i11ii11iIi11i
 if 70 - 70: ooO00oOoo + o0o00Oo0O . o0OO0 * o00ooo0
 if 2 - 2: ii . Oo0ooO0oo0oO . Oo0oO0ooo
 if 42 - 42: Oo0ooO0oo0oO % o0OO0 / i11ii11iIi11i - o0OO0 * Ii
 if 19 - 19: o0OO0 * I11i11Ii % Ii
 if 24 - 24: IiiI
 if 10 - 10: IiiI % o00ooo0 / Oo0ooO0oo0oO
 if 28 - 28: Oo0ooO0oo0oO % O0OOo
 if 48 - 48: Ii % o0OO0
 if 29 - 29: o00 + Ii % I1i1iI1i
 if 93 - 93: oOoO0oo0OOOo % iI11I1II1I1I
 if 90 - 90: I11i11Ii - Oo0ooO0oo0oO / o00ooo0 / o0o00Oo0O / I1i1iI1i
 if 87 - 87: oOoO0oo0OOOo / Oo0oO0ooo + iI11I1II1I1I
 iI1 = ''
 iII = ''
 if 93 - 93: iI11I1II1I1I + o0OO0 % O0OOo
 if 21 - 21: Oo0ooO0oo0oO
 iIiI1I1IIi11 = str ( I1I1i11 ( o0O0oO0 , iIi , iiO0O0o0oO0O00 , oo0i1 , iI1 , iII , iteration ) )
 if 25 - 25: Oo0oO0ooo - Iii1ii1II11i
 if 15 - 15: O0OOo . oOoO0oo0OOOo . Ii % IiiI
 if 48 - 48: oOoO0oo0OOOo % Iii1ii1II11i / I1i1iI1i . iI11I1II1I1I * ooO0OO000o
 if 65 - 65: oOoO0oo0OOOo
 if 31 - 31: I1i1iI1i * oOoO0oo0OOOo . Oo0oO0ooo % o00ooo0 + i1iIi11iIIi1I
 if iteration >= totaliterations :
  if 47 - 47: o0o00Oo0O * I11i11Ii * i11ii11iIi11i . ooO0OO000o
  return iIiI1I1IIi11
 else :
  if 95 - 95: o00ooo0 % Oo0oO0ooo . o0o00Oo0O % ooO00oOoo
  return oO00Ooo0oO ( iIiI1I1IIi11 , iteration + 1 )
  if 68 - 68: i1iIi11iIIi1I . i1iIi11iIIi1I - Iii1ii1II11i / I1i1iI1i . O0OOo / ii1I
  if 12 - 12: Iii1ii1II11i * ii1I * I1i1iI1i
def I1I1i11 ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 23 - 23: Oo0ooO0oo0oO / o0o00Oo0O / I11i11Ii
 if 49 - 49: I1i1iI1i . IiiI % o0OO0 / o00ooo0
 if 95 - 95: o0o00Oo0O * oOoO0oo0OOOo * Oo0oO0ooo . O0OOo / iI11I1II1I1I
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   I1IIi1I = str ( iIii1i1 ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + I1IIi1I + '\\b' , k [ c ] , p )
   else :
    p = oOoO00 ( p , I1IIi1I , k [ c ] )
    if 45 - 45: o00ooo0 . ii
    if 27 - 27: o00ooo0 * i1iIi11iIIi1I . oOoO0oo0OOOo
    if 17 - 17: ooO0OO000o % o00 * Oo0ooO0oo0oO % ii1I . I11i11Ii . iI11I1II1I1I
    if 27 - 27: Ii - I11i11Ii
    if 35 - 35: ii - ooO00oOoo / i11ii11iIi11i
    if 50 - 50: oOoO0oo0OOOo
 return p
 if 33 - 33: I1i1iI1i
 if 98 - 98: oOoO0oo0OOOo % ooO0OO000o
 if 95 - 95: iI11I1II1I1I - ooO00oOoo - Oo0ooO0oo0oO + ooO00oOoo % Iii1ii1II11i . I11i11Ii
 if 41 - 41: o0o00Oo0O + o0OO0 . ii1I - ooO0OO000o * IiiI . i11ii11iIi11i
 if 68 - 68: IiiI
def oOoO00 ( source_str , word_to_find , replace_with ) :
 i11Ii1IIi = None
 i11Ii1IIi = source_str . split ( word_to_find )
 if len ( i11Ii1IIi ) > 1 :
  Ii1I11i11I1i = [ ]
  oO00 = 0
  for IiI1II11iiI in i11Ii1IIi :
   if 56 - 56: o00
   Ii1I11i11I1i . append ( IiI1II11iiI )
   IIiiii = word_to_find
   if 84 - 84: oOoO0oo0OOOo - Ii
   if 1 - 1: o00 * oOoO0oo0OOOo
   if oO00 == len ( i11Ii1IIi ) - 1 :
    IIiiii = ''
   else :
    if len ( IiI1II11iiI ) == 0 :
     if ( len ( i11Ii1IIi [ oO00 + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( i11Ii1IIi [ oO00 + 1 ] ) > 0 and i11Ii1IIi [ oO00 + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      IIiiii = replace_with
      if 66 - 66: oOoO0oo0OOOo + ii1I % ooO0OO000o . o0o00Oo0O * Iii1ii1II11i % Iii1ii1II11i
    else :
     if ( i11Ii1IIi [ oO00 ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( i11Ii1IIi [ oO00 + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( i11Ii1IIi [ oO00 + 1 ] ) > 0 and i11Ii1IIi [ oO00 + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      IIiiii = replace_with
      if 87 - 87: Oo0ooO0oo0oO + IiiI . o00 - ii
   Ii1I11i11I1i . append ( IIiiii )
   oO00 += 1
   if 6 - 6: iI11I1II1I1I * ii
  source_str = '' . join ( Ii1I11i11I1i )
 return source_str
 if 28 - 28: i1iIi11iIIi1I * IiiI / ooO00oOoo
 if 52 - 52: o0o00Oo0O / IiiI % o00 * I11i11Ii % Oo0ooO0oo0oO
def o0oOOOO0 ( num , radix ) :
 if 11 - 11: ii1I
 oOoO00oo0O = ""
 if num == 0 : return '0'
 while num > 0 :
  oOoO00oo0O = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + oOoO00oo0O
  num /= radix
 return oOoO00oo0O
 if 19 - 19: o00 - IiiI - o00ooo0 - oOoO0oo0OOOo . o00 . ooO00oOoo
 if 48 - 48: o00 + Oo0oO0ooo
def iIii1i1 ( cc , a ) :
 I1IIi1I = "" if cc < a else iIii1i1 ( int ( cc / a ) , a )
 cc = ( cc % a )
 O0o0o0 = chr ( cc + 29 ) if cc > 35 else str ( o0oOOOO0 ( cc , 36 ) )
 return I1IIi1I + O0o0o0
 if 15 - 15: iI11I1II1I1I . o0o00Oo0O
 if 70 - 70: o00ooo0 . Ii % o00ooo0 . o0o00Oo0O - iI11I1II1I1I
def iIIIi1i1I11i ( cookieJar ) :
 try :
  i111i1iIi1 = ""
  for ooOOoooooo , OoO0oO in enumerate ( cookieJar ) :
   i111i1iIi1 += OoO0oO . name + "=" + OoO0oO . value + ";"
 except : pass
 if 10 - 10: ii1I . ooO0OO000o / IiiI * O0OOo
 return i111i1iIi1
 if 10 - 10: I1i1iI1i - i1iIi11iIIi1I
 if 59 - 59: ii * i1iIi11iIIi1I + ii1I
def Iiiiii111i1ii ( cookieJar , COOKIEFILE ) :
 try :
  iIi11iiIiI1I = os . path . join ( O0O00o0OOO0 , COOKIEFILE )
  cookieJar . save ( iIi11iiIiI1I , ignore_discard = True )
 except : pass
 if 23 - 23: O0OOo
 if 13 - 13: iI11I1II1I1I
def IIIii1 ( COOKIEFILE ) :
 if 77 - 77: Ii - iI11I1II1I1I / o0OO0 / O0OOo / i11ii11iIi11i
 ooo0O0o0OoOO = None
 if COOKIEFILE :
  try :
   iIi11iiIiI1I = os . path . join ( O0O00o0OOO0 , COOKIEFILE )
   ooo0O0o0OoOO = cookielib . LWPCookieJar ( )
   ooo0O0o0OoOO . load ( iIi11iiIiI1I , ignore_discard = True )
  except :
   ooo0O0o0OoOO = None
   if 9 - 9: i11ii11iIi11i
 if not ooo0O0o0OoOO :
  ooo0O0o0OoOO = cookielib . LWPCookieJar ( )
  if 60 - 60: ooO00oOoo
 return ooo0O0o0OoOO
 if 98 - 98: O0OOo
 if 34 - 34: iI11I1II1I1I * I1i1iI1i * I1i1iI1i / Iii1ii1II11i
def iI111i1I1II ( fun_call , page_data , Cookie_Jar , m ) :
 IIIIIIi1i = ''
 if 26 - 26: iI11I1II1I1I - o0o00Oo0O . o0o00Oo0O
 if IiIiiI not in sys . path :
  sys . path . append ( IiIiiI )
  if 68 - 68: Oo0ooO0oo0oO + o0OO0 . o0o00Oo0O . o00ooo0 % ii1I % Oo0ooO0oo0oO
  if 50 - 50: Oo0oO0ooo + IiiI
 try :
  o0OoOOo = 'import ' + fun_call . split ( '.' ) [ 0 ]
  if 56 - 56: I1i1iI1i / iI11I1II1I1I + oOoO0oo0OOOo % Oo0ooO0oo0oO . Oo0ooO0oo0oO - Iii1ii1II11i
  exec ( o0OoOOo )
  if 48 - 48: i1iIi11iIIi1I - O0OOo + i1iIi11iIIi1I - I11i11Ii * Ii . o00
 except :
  if 35 - 35: Oo0oO0ooo . o0o00Oo0O + i1iIi11iIIi1I + Oo0ooO0oo0oO + ii1I
  traceback . print_exc ( file = sys . stdout )
  if 65 - 65: o0o00Oo0O * I11i11Ii / I11i11Ii . oOoO0oo0OOOo
 exec ( 'ret_val=' + fun_call )
 if 87 - 87: ooO0OO000o * Iii1ii1II11i % i1iIi11iIIi1I * i1iIi11iIIi1I
 if 58 - 58: Oo0ooO0oo0oO . IiiI + I11i11Ii % i1iIi11iIIi1I - i11ii11iIi11i
 try :
  return str ( IIIIIIi1i )
 except : return IIIIIIi1i
 if 50 - 50: o00 % ooO0OO000o - O0OOo . ii1I + o0o00Oo0O % o00
 if 10 - 10: o00 . ii1I + o00ooo0
def OooOOOo0 ( fun_call , page_data , Cookie_Jar , m ) :
 if 66 - 66: i11ii11iIi11i % IiiI
 IIIIIIi1i = ''
 if IiIiiI not in sys . path :
  sys . path . append ( IiIiiI )
 OO0oOOo = open ( IiIiiI + "/LSProdynamicCode.py" , "w" )
 OO0oOOo . write ( fun_call ) ;
 OO0oOOo . close ( )
 import LSProdynamicCode
 IIIIIIi1i = LSProdynamicCode . GetLSProData ( page_data , Cookie_Jar , m )
 try :
  return str ( IIIIIIi1i )
 except : return IIIIIIi1i
 if 21 - 21: oOoO0oo0OOOo - ii % Ii
 if 71 - 71: ii1I - I1i1iI1i * ooO00oOoo + o0OO0 - i11ii11iIi11i % Iii1ii1II11i
def Ooo0oO ( captchakey , cj , type = 1 ) :
 if 32 - 32: ii1I . o00 + ooO0OO000o - i11ii11iIi11i - iI11I1II1I1I
 if 20 - 20: oOoO0oo0OOOo % Iii1ii1II11i
 if 44 - 44: ii . ooO0OO000o . Oo0ooO0oo0oO % ii
 Oo0oO00 = ""
 ii11ii11I = ""
 if 83 - 83: ooO0OO000o * ii1I * o00 . Iii1ii1II11i / I1i1iI1i + ii1I
 if 43 - 43: ii
 if 97 - 97: Iii1ii1II11i / i1iIi11iIIi1I + ooO00oOoo
 if 32 - 32: O0OOo % ooO00oOoo * i1iIi11iIIi1I
 if 72 - 72: O0OOo . o00 - ooO00oOoo - o00ooo0 % ii1I
 oO0o00O0O0oo0 = False
 i1I11Ii111II = None
 ii11ii11I = None
 if len ( captchakey ) > 0 :
  O000OOO00Ooo = captchakey
  if not O000OOO00Ooo . startswith ( 'http' ) :
   O000OOO00Ooo = 'http://www.google.com/recaptcha/api/challenge?k=' + O000OOO00Ooo + '&ajax=1'
   if 65 - 65: iI11I1II1I1I % o0OO0 + o0o00Oo0O / ii
  oO0o00O0O0oo0 = True
  if 52 - 52: o00ooo0 % Oo0ooO0oo0oO * I11i11Ii % I1i1iI1i + Oo0ooO0oo0oO / o00
  oo000o = 'challenge.*?\'(.*?)\''
  OO00o0oOO = '\'(.*?)\''
  i1i1I1 = IiiiI ( O000OOO00Ooo , cookieJar = cj )
  Oo0oO00 = re . findall ( oo000o , i1i1I1 ) [ 0 ]
  I1i = 'http://www.google.com/recaptcha/api/reload?c=' ;
  OOo0O = O000OOO00Ooo . split ( 'k=' ) [ 1 ]
  I1i += Oo0oO00 + '&k=' + OOo0O + '&reason=i&type=image&lang=en'
  oOOoooO0O0 = IiiiI ( I1i , cookieJar = cj )
  i1I11Ii111II = re . findall ( OO00o0oOO , oOOoooO0O0 ) [ 0 ]
  ii1O0ooooo000 = 'http://www.google.com/recaptcha/api/image?c=' + i1I11Ii111II
  if not ii1O0ooooo000 . startswith ( "http" ) :
   ii1O0ooooo000 = 'http://www.google.com/recaptcha/api/' + ii1O0ooooo000
  import random
  O0oooo00o0Oo = random . randrange ( 100 , 1000 , 5 )
  OooOoOO0OO = os . path . join ( O0O00o0OOO0 , str ( O0oooo00o0Oo ) + "captcha.img" )
  I1iiIiiii1111 = open ( OooOoOO0OO , "wb" )
  I1iiIiiii1111 . write ( IiiiI ( ii1O0ooooo000 , cookieJar = cj ) )
  I1iiIiiii1111 . close ( )
  I1ii1i11i = Oooooo0O00o ( captcha = OooOoOO0OO )
  ii11ii11I = I1ii1i11i . get ( )
  os . remove ( OooOoOO0OO )
  if 36 - 36: oOoO0oo0OOOo + Oo0oO0ooo * o0o00Oo0O . ii * ii
 if i1I11Ii111II :
  if type == 1 :
   return 'recaptcha_challenge_field=' + urllib . quote_plus ( i1I11Ii111II ) + '&recaptcha_response_field=' + urllib . quote_plus ( ii11ii11I )
  elif type == 2 :
   return 'recaptcha_challenge_field:' + i1I11Ii111II + ',recaptcha_response_field:' + ii11ii11I
  else :
   return 'recaptcha_challenge_field=' + urllib . quote_plus ( i1I11Ii111II ) + '&recaptcha_response_field=' + urllib . quote_plus ( ii11ii11I )
 else :
  return ''
  if 51 - 51: Iii1ii1II11i * Iii1ii1II11i
  if 98 - 98: i11ii11iIi11i - o00ooo0 . Oo0oO0ooo % Ii
def IiiiI ( url , cookieJar = None , post = None , timeout = 20 , headers = None , noredir = False ) :
 if 69 - 69: Iii1ii1II11i + o00 * o0o00Oo0O . Oo0ooO0oo0oO % oOoO0oo0OOOo
 if 96 - 96: O0OOo . O0OOo - I1i1iI1i / I1i1iI1i
 ii1Ii1IiIIi = urllib2 . HTTPCookieProcessor ( cookieJar )
 if 96 - 96: Ii / I11i11Ii - o0o00Oo0O . O0OOo
 if noredir :
  OOoO0 = urllib2 . build_opener ( iI , ii1Ii1IiIIi , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 else :
  OOoO0 = urllib2 . build_opener ( ii1Ii1IiIIi , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
  if 39 - 39: O0OOo / o0o00Oo0O * Oo0oO0ooo
 O00oO = urllib2 . Request ( url )
 O00oO . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36' )
 if headers :
  for Ii1iI111 , I1IiI in headers :
   O00oO . add_header ( Ii1iI111 , I1IiI )
   if 44 - 44: Oo0ooO0oo0oO / Oo0ooO0oo0oO . IiiI % Oo0oO0ooo + oOoO0oo0OOOo
 I11i1I1I = OOoO0 . open ( O00oO , post , timeout = timeout )
 Ooooooo = I11i1I1I . read ( )
 I11i1I1I . close ( )
 return Ooooooo ;
 if 57 - 57: o00 % i11ii11iIi11i - i11ii11iIi11i
 if 5 - 5: ii1I + ii % oOoO0oo0OOOo
def OO0Oo ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 IIiiiiiIiIIi = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 iiIiiIi1 = '' ;
 for ooOooo000oOO in range ( len ( IIiiiiiIiIIi ) ) :
  iiIiiIi1 += chr ( ord ( IIiiiiiIiIIi [ ooOooo000oOO ] ) - IIiiiiiIiIIi [ len ( IIiiiiiIiIIi ) - 1 ] ) ;
 iiIiiIi1 = urllib . unquote ( iiIiiIi1 )
 if 30 - 30: Oo0ooO0oo0oO + ooO0OO000o - Oo0oO0ooo * ii
 return iiIiiIi1
 if 19 - 19: Oo0oO0ooo - IiiI . iI11I1II1I1I . oOoO0oo0OOOo / Oo0ooO0oo0oO
 if 87 - 87: oOoO0oo0OOOo - O0OOo - Oo0ooO0oo0oO + i1iIi11iIIi1I % iI11I1II1I1I / Ii
def IIii1i1iii1 ( str ) :
 i1iIIII1iiIIi = re . findall ( 'unescape\(\'(.*?)\'' , str )
 if 17 - 17: I1i1iI1i
 if ( not i1iIIII1iiIIi == None ) and len ( i1iIIII1iiIIi ) > 0 :
  for oOoO0ooO0000 in i1iIIII1iiIIi :
   if 60 - 60: oOoO0oo0OOOo / Iii1ii1II11i + Oo0ooO0oo0oO - o00
   str = str . replace ( oOoO0ooO0000 , urllib . unquote ( oOoO0ooO0000 ) )
 return str
 if 49 - 49: i11ii11iIi11i - o0o00Oo0O / i11ii11iIi11i * oOoO0oo0OOOo + ooO00oOoo
Iiii1I = 0
if 61 - 61: iI11I1II1I1I - I1i1iI1i / o00 * I1i1iI1i % o00ooo0 % o00
if 63 - 63: Oo0ooO0oo0oO % iI11I1II1I1I
def o0 ( m , html_page , cookieJar ) :
 global Iiii1I
 Iiii1I += 1
 II1ii = m [ 'expres' ]
 oooiIii11i1I = m [ 'page' ]
 o00iIiiiII = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( II1ii ) [ 0 ]
 if 5 - 5: ii / IiiI % I1i1iI1i % i11ii11iIi11i * o00 + iI11I1II1I1I
 O000OOO00Ooo = re . compile ( o00iIiiiII ) . findall ( html_page ) [ 0 ]
 if 11 - 11: ooO00oOoo % Ii % o0OO0 . Oo0oO0ooo
 if not O000OOO00Ooo . startswith ( "http" ) :
  oOO0o = 'http://' + "" . join ( oooiIii11i1I . split ( '/' ) [ 2 : 3 ] )
  if O000OOO00Ooo . startswith ( "/" ) :
   O000OOO00Ooo = oOO0o + O000OOO00Ooo
  else :
   O000OOO00Ooo = oOO0o + '/' + O000OOO00Ooo
   if 65 - 65: o00 . i11ii11iIi11i + o00ooo0
 OooOoOO0OO = os . path . join ( O0O00o0OOO0 , str ( Iiii1I ) + "captcha.jpg" )
 I1iiIiiii1111 = open ( OooOoOO0OO , "wb" )
 if 25 - 25: IiiI + i1iIi11iIIi1I . i1iIi11iIIi1I % ii - o00ooo0
 O00oO = urllib2 . Request ( O000OOO00Ooo )
 O00oO . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  O00oO . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  O00oO . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  if 43 - 43: i11ii11iIi11i % i11ii11iIi11i
  O00oO . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 46 - 46: i1iIi11iIIi1I % iI11I1II1I1I . o00 . o0o00Oo0O * O0OOo / ii
  if 7 - 7: o0OO0 - o0o00Oo0O * I1i1iI1i - IiiI - ooO0OO000o
  if 41 - 41: I11i11Ii - ooO00oOoo % ooO0OO000o . ooO00oOoo - I1i1iI1i
  if 45 - 45: o00ooo0 - Oo0ooO0oo0oO
 urllib2 . urlopen ( O00oO )
 I11i1I1I = urllib2 . urlopen ( O00oO )
 if 70 - 70: i11ii11iIi11i % I11i11Ii / I11i11Ii . I1i1iI1i % O0OOo . ooO0OO000o
 I1iiIiiii1111 . write ( I11i1I1I . read ( ) )
 I11i1I1I . close ( )
 I1iiIiiii1111 . close ( )
 I1ii1i11i = Oooooo0O00o ( captcha = OooOoOO0OO )
 ii11ii11I = I1ii1i11i . get ( )
 return ii11ii11I
 if 10 - 10: o00ooo0 - Ii . Iii1ii1II11i % ii1I
 if 78 - 78: iI11I1II1I1I * i1iIi11iIIi1I . i1iIi11iIIi1I - Oo0ooO0oo0oO . iI11I1II1I1I
def I111I1I ( imageregex , html_page , cookieJar , m ) :
 global Iiii1I
 Iiii1I += 1
 if 54 - 54: ooO0OO000o + I1i1iI1i % I1i1iI1i % IiiI
 if 25 - 25: o00 - i1iIi11iIIi1I
 if not imageregex == '' :
  if html_page . startswith ( "http" ) :
   oOO0o = IiiiI ( html_page , cookieJar = cookieJar )
  else :
   oOO0o = html_page
  O000OOO00Ooo = re . compile ( imageregex ) . findall ( html_page ) [ 0 ]
 else :
  O000OOO00Ooo = html_page
  if 'oneplay.tv/embed' in html_page :
   import oneplay
   oOO0o = IiiiI ( html_page , cookieJar = cookieJar )
   O000OOO00Ooo = oneplay . getCaptchaUrl ( oOO0o )
   if 10 - 10: o0o00Oo0O % Oo0oO0ooo . i11ii11iIi11i + IiiI + Iii1ii1II11i
 OooOoOO0OO = os . path . join ( O0O00o0OOO0 , str ( Iiii1I ) + "captcha.jpg" )
 I1iiIiiii1111 = open ( OooOoOO0OO , "wb" )
 if 52 - 52: oOoO0oo0OOOo / i11ii11iIi11i + ooO00oOoo
 O00oO = urllib2 . Request ( O000OOO00Ooo )
 O00oO . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  O00oO . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  O00oO . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'accept' in m :
  O00oO . add_header ( 'Accept' , m [ 'accept' ] )
 if 'setcookie' in m :
  if 49 - 49: iI11I1II1I1I % I1i1iI1i . I1i1iI1i . iI11I1II1I1I * oOoO0oo0OOOo / I1i1iI1i
  O00oO . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 95 - 95: o0OO0 * iI11I1II1I1I + Iii1ii1II11i
  if 5 - 5: i1iIi11iIIi1I
  if 100 - 100: o00ooo0 + iI11I1II1I1I
  if 59 - 59: Oo0oO0ooo
  if 89 - 89: oOoO0oo0OOOo % iI11I1II1I1I
 I11i1I1I = urllib2 . urlopen ( O00oO )
 if 35 - 35: Iii1ii1II11i + ooO00oOoo - oOoO0oo0OOOo % o0OO0 % IiiI % oOoO0oo0OOOo
 I1iiIiiii1111 . write ( I11i1I1I . read ( ) )
 I11i1I1I . close ( )
 I1iiIiiii1111 . close ( )
 I1ii1i11i = Oooooo0O00o ( captcha = OooOoOO0OO )
 ii11ii11I = I1ii1i11i . get ( )
 return ii11ii11I
 if 45 - 45: I11i11Ii * Oo0ooO0oo0oO % i11ii11iIi11i
 if 24 - 24: O0OOo - I1i1iI1i * o0OO0
 if 87 - 87: o00ooo0 - Iii1ii1II11i % Iii1ii1II11i . o0OO0 / Iii1ii1II11i
 if 6 - 6: oOoO0oo0OOOo / iI11I1II1I1I * ii * Ii
 if 79 - 79: Oo0oO0ooo % i11ii11iIi11i
 if 81 - 81: Ii + Ii * i11ii11iIi11i + Oo0oO0ooo
 if 32 - 32: o0o00Oo0O . ii
 if 15 - 15: I11i11Ii . i11ii11iIi11i
 if 17 - 17: Ii / i1iIi11iIIi1I . i11ii11iIi11i / I11i11Ii
 if 38 - 38: ii1I . Iii1ii1II11i % o00ooo0 + iI11I1II1I1I + o0o00Oo0O
 if 47 - 47: i11ii11iIi11i + Oo0oO0ooo / ooO0OO000o
 if 97 - 97: Iii1ii1II11i / I11i11Ii % o0o00Oo0O + ii1I - O0OOo
 if 38 - 38: IiiI % ooO00oOoo + Ii + o00 + O0OOo / Ii
 if 94 - 94: o00 - i1iIi11iIIi1I + o0OO0
 if 59 - 59: I1i1iI1i . I11i11Ii - iI11I1II1I1I + iI11I1II1I1I
def oO0o0Oo ( name , headname ) :
 if 76 - 76: O0OOo / oOoO0oo0OOOo + Iii1ii1II11i
 if 2 - 2: Ii - ooO00oOoo + i11ii11iIi11i % I1i1iI1i * o00ooo0
 Ooo000O00 = xbmc . Keyboard ( 'default' , 'heading' , True )
 Ooo000O00 . setDefault ( name )
 Ooo000O00 . setHeading ( headname )
 Ooo000O00 . setHiddenInput ( False )
 return Ooo000O00 . getText ( )
 if 36 - 36: Oo0ooO0oo0oO % Ii
 if 47 - 47: ii1I + ooO0OO000o . i1iIi11iIIi1I * o0OO0 . I1i1iI1i / ii1I
 if 50 - 50: ooO00oOoo / ii1I % ii
 if 83 - 83: Iii1ii1II11i * Iii1ii1II11i + Oo0ooO0oo0oO
class Oooooo0O00o ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 57 - 57: o0o00Oo0O - o0o00Oo0O . Iii1ii1II11i / IiiI / o00ooo0
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   I1IiII1I1i1I1 = self . kbd . getText ( )
   self . close ( )
   return I1IiII1I1i1I1
  self . close ( )
  return False
  if 28 - 28: i1iIi11iIIi1I + Oo0oO0ooo % ooO0OO000o / i11ii11iIi11i + Ii
  if 20 - 20: Iii1ii1II11i
def oO ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 3 - 3: i11ii11iIi11i * ii1I . I11i11Ii . o0o00Oo0O - oOoO0oo0OOOo
 if 81 - 81: I11i11Ii - iI11I1II1I1I / I11i11Ii / o0o00Oo0O
def I1Ii1111iIi ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 34 - 34: o00ooo0 * o00ooo0 - Iii1ii1II11i - o0o00Oo0O . Ii
 if 32 - 32: iI11I1II1I1I . i11ii11iIi11i * o0OO0 / Oo0ooO0oo0oO . ooO0OO000o - i1iIi11iIIi1I
def IIIi ( ) :
 III11IiiiIi1 = [ ]
 IiI1Ii1ii = sys . argv [ 2 ]
 if len ( IiI1Ii1ii ) >= 2 :
  Ii11iiIIiI1 = sys . argv [ 2 ]
  I1Iii11I111I = Ii11iiIIiI1 . replace ( '?' , '' )
  if ( Ii11iiIIiI1 [ len ( Ii11iiIIiI1 ) - 1 ] == '/' ) :
   Ii11iiIIiI1 = Ii11iiIIiI1 [ 0 : len ( Ii11iiIIiI1 ) - 2 ]
  IIIiI1iiiiiIi = I1Iii11I111I . split ( '&' )
  III11IiiiIi1 = { }
  for ooOooo000oOO in range ( len ( IIIiI1iiiiiIi ) ) :
   O0oo0 = { }
   O0oo0 = IIIiI1iiiiiIi [ ooOooo000oOO ] . split ( '=' )
   if ( len ( O0oo0 ) ) == 2 :
    III11IiiiIi1 [ O0oo0 [ 0 ] ] = O0oo0 [ 1 ]
 return III11IiiiIi1
 if 37 - 37: Ii
 if 12 - 12: Iii1ii1II11i / o00ooo0
def ii11 ( ) :
 II1iI = json . loads ( open ( o0oo0o0O00OO ) . read ( ) )
 II1I1iiIII = len ( II1iI )
 for ooOooo000oOO in II1iI :
  iiIiI = ooOooo000oOO [ 0 ]
  IiII = ooOooo000oOO [ 1 ]
  Ii11 = ooOooo000oOO [ 2 ]
  try :
   Ii1I1i = ooOooo000oOO [ 3 ]
   if Ii1I1i == None :
    raise
  except :
   if O00 . getSetting ( 'use_thumb' ) == "true" :
    Ii1I1i = Ii11
   else :
    Ii1I1i = OOO00O
  try : i1i1ii = ooOooo000oOO [ 5 ]
  except : i1i1ii = None
  try : i1I = ooOooo000oOO [ 6 ]
  except : i1I = None
  if 3 - 3: o00ooo0 + ooO00oOoo . ii1I / Oo0ooO0oo0oO % ooO00oOoo
  if ooOooo000oOO [ 4 ] == 0 :
   i1iI ( IiII , iiIiI , Ii11 , Ii1I1i , '' , '' , '' , 'fav' , i1i1ii , i1I , II1I1iiIII )
  else :
   iI1I111Ii111i ( iiIiI , IiII , ooOooo000oOO [ 4 ] , Ii11 , OOO00O , '' , '' , '' , '' , 'fav' )
   if 98 - 98: Oo0oO0ooo * iI11I1II1I1I . o00ooo0 * i1iIi11iIIi1I / Iii1ii1II11i + O0OOo
   if 25 - 25: o0OO0
def Iii11111iiI ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 o0OOOOoO = [ ]
 try :
  if 70 - 70: ooO0OO000o + ooO00oOoo + Ii - ii1I / Oo0oO0ooo
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( o0oo0o0O00OO ) == False :
  i1II1 ( 'Making Favorites File' )
  o0OOOOoO . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  III1i1IiI1i = open ( o0oo0o0O00OO , "w" )
  III1i1IiI1i . write ( json . dumps ( o0OOOOoO ) )
  III1i1IiI1i . close ( )
 else :
  i1II1 ( 'Appending Favorites' )
  III1i1IiI1i = open ( o0oo0o0O00OO ) . read ( )
  oO0Oo = json . loads ( III1i1IiI1i )
  oO0Oo . append ( ( name , url , iconimage , fanart , mode ) )
  Oo0oO = open ( o0oo0o0O00OO , "w" )
  Oo0oO . write ( json . dumps ( oO0Oo ) )
  Oo0oO . close ( )
  if 40 - 40: Iii1ii1II11i * ooO00oOoo
  if 38 - 38: o0o00Oo0O . i1iIi11iIIi1I + oOoO0oo0OOOo - o0OO0
def i1iIii ( name ) :
 oO0Oo = json . loads ( open ( o0oo0o0O00OO ) . read ( ) )
 for ooOOoooooo in range ( len ( oO0Oo ) ) :
  if oO0Oo [ ooOOoooooo ] [ 0 ] == name :
   del oO0Oo [ ooOOoooooo ]
   Oo0oO = open ( o0oo0o0O00OO , "w" )
   Oo0oO . write ( json . dumps ( oO0Oo ) )
   Oo0oO . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 65 - 65: o00 . o0OO0 - o00ooo0
 if 93 - 93: o0o00Oo0O
def iii1 ( url ) :
 import urlresolver
 o00000oo00 = urlresolver . HostedMediaFile ( url )
 if o00000oo00 :
  ii111I = urlresolver . resolve ( url )
  iIII1iIi = ii111I
  if isinstance ( iIII1iIi , list ) :
   for Ii11i1I11i in iIII1iIi :
    o000O0oo = O00 . getSetting ( 'quality' )
    if Ii11i1I11i [ 'quality' ] == 'HD' :
     ii111I = Ii11i1I11i [ 'url' ]
     break
    elif Ii11i1I11i [ 'quality' ] == 'SD' :
     ii111I = Ii11i1I11i [ 'url' ]
    elif Ii11i1I11i [ 'quality' ] == '1080p' and O00 . getSetting ( '1080pquality' ) == 'true' :
     ii111I = Ii11i1I11i [ 'url' ]
     break
  else :
   ii111I = iIII1iIi
 else :
  xbmc . executebuiltin ( "XBMC.Notification(goldentv,Urlresolver donot support this domain. - ,5000)" )
  ii111I = url
 return ii111I
 if 78 - 78: i11ii11iIi11i / i1iIi11iIIi1I - iI11I1II1I1I - Ii * o00
 if 84 - 84: Oo0ooO0oo0oO + o00ooo0 + IiiI
def i1i1iIII11i ( name , mu_playlist , queueVideo = None ) :
 i1i1ii = xbmc . PlayList ( xbmc . PLAYLIST_VIDEO )
 if 40 - 40: iI11I1II1I1I / oOoO0oo0OOOo - o0o00Oo0O * iI11I1II1I1I
 if O00 . getSetting ( 'ask_playlist_items' ) == 'true' and not queueVideo :
  import urlparse
  oOoo0ooOoo = [ ]
  for ooOooo000oOO in mu_playlist :
   oOooOOo00ooO = urlparse . urlparse ( ooOooo000oOO ) . netloc
   if oOooOOo00ooO == '' :
    oOoo0ooOoo . append ( name )
   else :
    oOoo0ooOoo . append ( oOooOOo00ooO )
  o0OO0oooo = xbmcgui . Dialog ( )
  ooOOoooooo = o0OO0oooo . select ( 'Choose a video source' , oOoo0ooOoo )
  if ooOOoooooo >= 0 :
   if "&mode=19" in mu_playlist [ ooOOoooooo ] :
    if 40 - 40: ooO00oOoo - oOoO0oo0OOOo * I1i1iI1i - Oo0oO0ooo / oOoO0oo0OOOo
    xbmc . Player ( ) . play ( iii1 ( mu_playlist [ ooOOoooooo ] . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) ) )
   elif "$doregex" in mu_playlist [ ooOOoooooo ] :
    if 71 - 71: o0OO0 / ii % Oo0oO0ooo / oOoO0oo0OOOo % ooO00oOoo
    I1i1iI = mu_playlist [ ooOOoooooo ] . split ( '&regexs=' )
    if 30 - 30: I1i1iI1i % oOoO0oo0OOOo / Iii1ii1II11i * o0o00Oo0O * o00ooo0 . I11i11Ii
    IiII , Oo000ooOOO = iII111i ( I1i1iI [ 1 ] , I1i1iI [ 0 ] )
    iIi11I11 = IiII . replace ( ';' , '' )
    xbmc . Player ( ) . play ( iIi11I11 )
    if 40 - 40: iI11I1II1I1I
   else :
    IiII = mu_playlist [ ooOOoooooo ]
    xbmc . Player ( ) . play ( IiII )
 elif not queueVideo :
  if 92 - 92: oOoO0oo0OOOo % o0o00Oo0O
  i1i1ii . clear ( )
  I1II1I11I1I = 0
  for ooOooo000oOO in mu_playlist :
   I1II1I11I1I += 1
   oo00ooooOOo00 = xbmcgui . ListItem ( '%s) %s' % ( str ( I1II1I11I1I ) , name ) )
   if 16 - 16: Ii / ii1I % Oo0ooO0oo0oO
   try :
    if "$doregex" in ooOooo000oOO :
     I1i1iI = ooOooo000oOO . split ( '&regexs=' )
     if 84 - 84: I1i1iI1i - i1iIi11iIIi1I * o0o00Oo0O / o00ooo0 . o00ooo0
     IiII , Oo000ooOOO = iII111i ( I1i1iI [ 1 ] , I1i1iI [ 0 ] )
    elif "&mode=19" in ooOooo000oOO :
     IiII = iii1 ( ooOooo000oOO . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    if IiII :
     i1i1ii . add ( IiII , oo00ooooOOo00 )
    else :
     raise
   except Exception :
    i1i1ii . add ( ooOooo000oOO , oo00ooooOOo00 )
    pass
    if 93 - 93: o0o00Oo0O / O0OOo + I11i11Ii
  xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
 else :
  if 20 - 20: Oo0oO0ooo / o00 % ii / iI11I1II1I1I + I11i11Ii
  i11I1I1iiI = xbmcgui . ListItem ( name )
  i1i1ii . add ( mu_playlist , i11I1I1iiI )
  if 57 - 57: IiiI / ooO00oOoo
  if 13 - 13: ii + i11ii11iIi11i
def ii1IIii ( name , url ) :
 if O00 . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('goldentv','Choose a location to save files.',15000," + i1iiI11I + ")" )
  O00 . openSettings ( )
 Ii11iiIIiI1 = { 'url' : url , 'download_path' : O00 . getSetting ( 'save_location' ) }
 downloader . download ( name , Ii11iiIIiI1 )
 o0OO0oooo = xbmcgui . Dialog ( )
 IIIIIii1ii11 = o0OO0oooo . yesno ( 'AdryanList' , 'Do you want to add this file as a source?' )
 if IIIIIii1ii11 :
  OO0oOoOO0oOO0 ( os . path . join ( O00 . getSetting ( 'save_location' ) , name ) )
  if 31 - 31: iI11I1II1I1I * O0OOo - ii * O0OOo
  if 60 - 60: Oo0ooO0oo0oO % Oo0ooO0oo0oO * o0OO0 / I11i11Ii * oOoO0oo0OOOo * I11i11Ii
def OOoO0o ( url , name ) :
 if 62 - 62: I1i1iI1i / o0OO0 % i1iIi11iIIi1I . ii / Ii / ooO00oOoo
 OooO0O0Ooo = [ 'plugin://plugin.video.genesis/?action=shows_search' , 'plugin://plugin.video.genesis/?action=movies_search' , 'plugin://plugin.video.salts/?mode=search&amp;section=Movies' , 'plugin://plugin.video.salts/?mode=search&amp;section=TV' , 'plugin://plugin.video.muchmovies.hd/?action=movies_search' , 'plugin://plugin.video.viooz.co/?action=root_search' , 'plugin://plugin.video.ororotv/?action=shows_search' , 'plugin://plugin.video.yifymovies.hd/?action=movies_search' , 'plugin://plugin.video.cartoonhdtwo/?description&amp;fanart&amp;iconimage&amp;mode=3&amp;name=Search&amp;url=url' , 'plugin://plugin.video.youtube/kodion/search/list/' , 'plugin://plugin.video.dailymotion_com/?mode=search&amp;url' , 'plugin://plugin.video.vimeo/kodion/search/list/' ]
 if 85 - 85: IiiI / ooO00oOoo
 if 67 - 67: I1i1iI1i % o0OO0
 if 39 - 39: Ii + Oo0oO0ooo
 if 7 - 7: iI11I1II1I1I - ii1I
 if 10 - 10: ooO00oOoo % o0o00Oo0O / I11i11Ii % I1i1iI1i
 if 25 - 25: ooO0OO000o / i11ii11iIi11i
 if 64 - 64: o0o00Oo0O % O0OOo
 if 40 - 40: IiiI + I1i1iI1i
 if 77 - 77: Ii % Oo0oO0ooo + ooO00oOoo % ii - I1i1iI1i
 if 26 - 26: i1iIi11iIIi1I + o0o00Oo0O - iI11I1II1I1I
 if 47 - 47: ii
 if 2 - 2: oOoO0oo0OOOo % ooO00oOoo * i1iIi11iIIi1I * oOoO0oo0OOOo
 oOoo0ooOoo = [ 'Gensis TV' , 'Genesis Movie' , 'Salt movie' , 'salt TV' , 'Muchmovies' , 'viooz' , 'ORoroTV' , 'Yifymovies' , 'cartoonHD' , 'Youtube' , 'DailyMotion' , 'Vimeo' ]
 if 65 - 65: Ii + i1iIi11iIIi1I * ii - i11ii11iIi11i
 o0OO0oooo = xbmcgui . Dialog ( )
 ooOOoooooo = o0OO0oooo . select ( 'Choose a video source' , oOoo0ooOoo )
 if 26 - 26: IiiI % Oo0ooO0oo0oO + Oo0ooO0oo0oO % I1i1iI1i * Ii / o00
 if ooOOoooooo >= 0 :
  url = OooO0O0Ooo [ ooOOoooooo ]
  if 64 - 64: o0OO0 % oOoO0oo0OOOo / ooO0OO000o % O0OOo - o00
  I1II1IiI1 ( url )
  if 26 - 26: Oo0ooO0oo0oO * i1iIi11iIIi1I
  if 31 - 31: I1i1iI1i * o0OO0 . o00ooo0
def iI1I111Ii111i ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False , regexs = None , reg_url = None , allinfo = { } ) :
 if 35 - 35: I1i1iI1i
 o00oo = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 O0oO0oo0O = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oooOOO0ooOoOOO = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if len ( allinfo ) < 1 :
  oooOOO0ooOoOOO . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 else :
  oooOOO0ooOoOOO . setInfo ( type = "Video" , infoLabels = allinfo )
 oooOOO0ooOoOOO . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  o0IiIiI111IIII1 = [ ]
  o0OoOo00o0o = O00 . getSetting ( 'parentalblocked' )
  o0OoOo00o0o = o0OoOo00o0o == "true"
  OOOoOooO000oO = O00 . getSetting ( 'parentalblockedpin' )
  if 87 - 87: o00 % i1iIi11iIIi1I
  if len ( OOOoOooO000oO ) > 0 :
   if o0OoOo00o0o :
    o0IiIiI111IIII1 . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   else :
    o0IiIiI111IIII1 . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 62 - 62: i11ii11iIi11i + O0OOo / o00 * Ii
  if showcontext == 'source' :
   if 37 - 37: o00
   if name in str ( o00OooOooo ) :
    o0IiIiI111IIII1 . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 33 - 33: i11ii11iIi11i - o0o00Oo0O - i11ii11iIi11i
    if 94 - 94: Oo0oO0ooo * I1i1iI1i * ii / IiiI . Oo0oO0ooo - IiiI
  elif showcontext == 'download' :
   o0IiIiI111IIII1 . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   o0IiIiI111IIII1 . append ( ( 'Remove from AdryanList Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  if showcontext == '!!update' :
   I1I1i = (
 '%s?url=%s&mode=17&regexs=%s'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( reg_url ) , regexs )
 )
   o0IiIiI111IIII1 . append ( ( '[COLOR yellow]!!update[/COLOR]' , 'XBMC.RunPlugin(%s)' % I1I1i ) )
  if not name in O000OO0 :
   o0IiIiI111IIII1 . append ( ( 'Add to goldentv Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  oooOOO0ooOoOOO . addContextMenuItems ( o0IiIiI111IIII1 )
 O0oO0oo0O = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o00oo , listitem = oooOOO0ooOoOOO , isFolder = True )
 return O0oO0oo0O
 if 45 - 45: Oo0ooO0oo0oO
 if 25 - 25: Oo0ooO0oo0oO % o0o00Oo0O
def I11oO0oo ( url , title , media_type = 'video' ) :
 if 54 - 54: Oo0ooO0oo0oO . ooO00oOoo * o0OO0 % i1iIi11iIIi1I - I1i1iI1i
 if 74 - 74: Iii1ii1II11i - o00 * ii1I
 import youtubedl
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 12 - 12: o0o00Oo0O
   YDStreamExtractor . manageDownloads ( )
  else :
   OoO00OooO0 = xbmc . Player ( ) . getPlayingFile ( )
   if 98 - 98: Oo0ooO0oo0oO + o00ooo0
   OoO00OooO0 = OoO00OooO0 . split ( '|User-Agent=' ) [ 0 ]
   oo00ooooOOo00 = { 'url' : OoO00OooO0 , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = oo00ooooOOo00 )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 52 - 52: i1iIi11iIIi1I / oOoO0oo0OOOo - ooO00oOoo . o00
  if 50 - 50: iI11I1II1I1I - o00 - I1i1iI1i
def oo00O0O0O0o0o ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
 if 74 - 74: o0o00Oo0O % ii * i1iIi11iIIi1I + Oo0ooO0oo0oO * o00
 if 100 - 100: Oo0ooO0oo0oO + o00ooo0 * IiiI + ooO0OO000o
def oOo0O000Ooo0 ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
 if 30 - 30: ii1I
 if 75 - 75: I1i1iI1i . Oo0ooO0oo0oO - iI11I1II1I1I * i11ii11iIi11i * o00
def ooo0OO0OOooO0 ( s ) : return "" . join ( filter ( lambda O00O00 : ord ( O00O00 ) < 128 , s ) )
if 66 - 66: i1iIi11iIIi1I - iI11I1II1I1I
if 9 - 9: IiiI % Iii1ii1II11i . Iii1ii1II11i
def IiIIIIii11i ( command ) :
 oO0Oo = ''
 try :
  oO0Oo = xbmc . executeJSONRPC ( oOo0O000Ooo0 ( command ) )
 except UnicodeEncodeError :
  oO0Oo = xbmc . executeJSONRPC ( oo00O0O0O0o0o ( command ) )
  if 82 - 82: Iii1ii1II11i
 return oOo0O000Ooo0 ( oO0Oo )
 if 54 - 54: IiiI + I1i1iI1i - iI11I1II1I1I % O0OOo % Oo0oO0ooo
 if 19 - 19: Iii1ii1II11i / iI11I1II1I1I % ii1I . ii
def I1II1IiI1 ( url , give_me_result = None , playlist = False ) :
 if 'audio' in url :
  O0 = oOo0O000Ooo0 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params": {"directory":"%s","media":"video", "properties": ["title", "album", "artist", "duration","thumbnail", "year"]}, "id": 1}' ) % url
 else :
  O0 = oOo0O000Ooo0 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":[ "plot","playcount","director", "genre","votes","duration","trailer","premiered","thumbnail","title","year","dateadded","fanart","rating","season","episode","studio","mpaa"]},"id":1}' ) % url
 oO0oo0O0 = json . loads ( IiIIIIii11i ( O0 ) )
 if 66 - 66: Oo0ooO0oo0oO - O0OOo - i1iIi11iIIi1I
 if give_me_result :
  return oO0oo0O0
 if oO0oo0O0 . has_key ( 'error' ) :
  return
 else :
  if 54 - 54: o00 . ii1I
  for ooOooo000oOO in oO0oo0O0 [ 'result' ] [ 'files' ] :
   i1IiIiIiiI1 = { }
   url = ooOooo000oOO [ 'file' ]
   iiIiI = ooo0OO0OOooO0 ( ooOooo000oOO [ 'label' ] )
   O0OO0O = ooo0OO0OOooO0 ( ooOooo000oOO [ 'thumbnail' ] )
   OOO00O = ooo0OO0OOooO0 ( ooOooo000oOO [ 'fanart' ] )
   i1IiIiIiiI1 = dict ( ( k , v ) for k , v in ooOooo000oOO . iteritems ( ) if not v == '0' or not v == - 1 or v == '' )
   i1IiIiIiiI1 . pop ( "file" , None )
   if ooOooo000oOO [ 'filetype' ] == 'file' :
    if playlist :
     i1i1iIII11i ( iiIiI , url , queueVideo = '1' )
     continue
    else :
     i1iI ( url , iiIiI , O0OO0O , OOO00O , '' , '' , '' , '' , None , '' , total = len ( oO0oo0O0 [ 'result' ] [ 'files' ] ) , allinfo = i1IiIiIiiI1 )
     if 41 - 41: ooO0OO000o
     if ooOooo000oOO [ 'type' ] and ooOooo000oOO [ 'type' ] == 'tvshow' :
      xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'tvshows' )
     elif ooOooo000oOO [ 'episode' ] > 0 :
      xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'episodes' )
      if 43 - 43: o0o00Oo0O - O0OOo % ii % Oo0ooO0oo0oO + o00
   else :
    iI1I111Ii111i ( iiIiI , url , 53 , O0OO0O , OOO00O , '' , '' , '' , '' , allinfo = i1IiIiIiiI1 )
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
  if 61 - 61: O0OOo . Ii + o0OO0
  if 8 - 8: iI11I1II1I1I
def i1iI ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" , allinfo = { } ) :
 if 55 - 55: o0OO0
 o0IiIiI111IIII1 = [ ]
 o0OoOo00o0o = O00 . getSetting ( 'parentalblocked' )
 o0OoOo00o0o = o0OoOo00o0o == "true"
 OOOoOooO000oO = O00 . getSetting ( 'parentalblockedpin' )
 if 37 - 37: Oo0oO0ooo / Ii / i1iIi11iIIi1I
 if len ( OOOoOooO000oO ) > 0 :
  if o0OoOo00o0o :
   o0IiIiI111IIII1 . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  else :
   o0IiIiI111IIII1 . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 97 - 97: ooO00oOoo . I1i1iI1i / I11i11Ii
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 O0oO0oo0O = True
 o00OO0o0 = False
 if regexs :
  i1II1IiiIi = '17'
  if 'listrepeat' in regexs :
   o00OO0o0 = True
   if 13 - 13: o0o00Oo0O % O0OOo % I1i1iI1i
  o0IiIiI111IIII1 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif ( any ( x in url for x in iiI1IiI ) and url . startswith ( 'http' ) ) or url . endswith ( '&mode=19' ) :
  url = url . replace ( '&mode=19' , '' )
  i1II1IiiIi = '19'
  o0IiIiI111IIII1 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  i1II1IiiIi = '18'
  o0IiIiI111IIII1 . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if O00 . getSetting ( 'dlaudioonly' ) == 'true' :
   o0IiIiI111IIII1 . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) :
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  i1II1IiiIi = '12'
 else :
  i1II1IiiIi = '12'
  o0IiIiI111IIII1 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 if 'plugin://plugin.video.youtube/play/?video_id=' in url :
  Ii11IiI111 = url . replace ( 'plugin://plugin.video.youtube/play/?video_id=' , 'https://www.youtube.com/watch?v=' )
  o0IiIiI111IIII1 . append ( ( '!!Download [COLOR blue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( Ii11IiI111 ) , urllib . quote_plus ( name ) ) ) )
 o00oo = sys . argv [ 0 ] + "?"
 IIiii11ii1II1 = False
 if playlist :
  if O00 . getSetting ( 'add_playlist' ) == "false" :
   o00oo += "url=" + urllib . quote_plus ( url ) + "&mode=" + i1II1IiiIi
  else :
   o00oo += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR magenta] (' + str ( len ( playlist ) ) + ' items )[/COLOR]'
   IIiii11ii1II1 = True
 else :
  o00oo += "url=" + urllib . quote_plus ( url ) + "&mode=" + i1II1IiiIi
 if regexs :
  o00oo += "&regexs=" + regexs
 if not setCookie == '' :
  o00oo += "&setCookie=" + urllib . quote_plus ( setCookie )
  if 97 - 97: I1i1iI1i - IiiI + O0OOo
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oooOOO0ooOoOOO = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 if len ( allinfo ) < 1 :
  oooOOO0ooOoOOO . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
  if 89 - 89: o0OO0 + I1i1iI1i * I1i1iI1i % ii1I % I1i1iI1i
 else :
  oooOOO0ooOoOOO . setInfo ( type = "Video" , infoLabels = allinfo )
 oooOOO0ooOoOOO . setProperty ( "Fanart_Image" , fanart )
 if 96 - 96: IiiI * o0OO0 - Oo0ooO0oo0oO * IiiI * ii1I
 if ( not IIiii11ii1II1 ) and not any ( x in url for x in II ) and not '$PLAYERPROXY$=' in url :
  if regexs :
   if 8 - 8: O0OOo - i1iIi11iIIi1I + iI11I1II1I1I + ii1I * o00ooo0 - iI11I1II1I1I
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) and 'listrepeat' not in urllib . unquote_plus ( regexs ) :
    if 30 - 30: I1i1iI1i / Iii1ii1II11i
    oooOOO0ooOoOOO . setProperty ( 'IsPlayable' , 'true' )
  else :
   oooOOO0ooOoOOO . setProperty ( 'IsPlayable' , 'true' )
 else :
  i1II1 ( 'NOT setting isplayable' + url )
 if showcontext :
  if 22 - 22: o0OO0 * o00
  if showcontext == 'fav' :
   o0IiIiI111IIII1 . append (
 ( 'Remove from AdryanList Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in O000OO0 :
   try :
    iIIIiIi1i = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   except :
    iIIIiIi1i = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage . encode ( "utf-8" ) ) , urllib . quote_plus ( fanart . encode ( "utf-8" ) ) )
 )
   if playlist :
    iIIIiIi1i += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    iIIIiIi1i += "&regexs=" + regexs
   o0IiIiI111IIII1 . append ( ( 'Add to goldentv Favorites' , 'XBMC.RunPlugin(%s)' % iIIIiIi1i ) )
  oooOOO0ooOoOOO . addContextMenuItems ( o0IiIiI111IIII1 )
 if not playlist is None :
  if O00 . getSetting ( 'add_playlist' ) == "false" :
   iiIiiIi = name . split ( ') ' ) [ 1 ]
   ooOo0o = [
 ( 'Play ' + iiIiiIi + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( iiIiiIi ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
   oooOOO0ooOoOOO . addContextMenuItems ( ooOo0o )
   if 44 - 44: i1iIi11iIIi1I . i1iIi11iIIi1I + ii * Ii / I1i1iI1i + ooO00oOoo
 O0oO0oo0O = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o00oo , listitem = oooOOO0ooOoOOO , totalItems = total , isFolder = o00OO0o0 )
 if 17 - 17: Oo0ooO0oo0oO + ooO0OO000o
 if 43 - 43: I1i1iI1i % o00ooo0 / IiiI * ooO00oOoo
 return O0oO0oo0O
 if 85 - 85: iI11I1II1I1I . ii . IiiI
 if 77 - 77: I11i11Ii % O0OOo
def oO0oo ( url , name , iconimage , setresolved = True ) :
 if setresolved :
  o00o0o000Oo = True
  if '$$LSDirect$$' in url :
   url = url . replace ( '$$LSDirect$$' , '' )
   o00o0o000Oo = False
   if 100 - 100: ii1I - Ii . ooO00oOoo * i11ii11iIi11i
  oooOOO0ooOoOOO = xbmcgui . ListItem ( name , iconImage = iconimage )
  oooOOO0ooOoOOO . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  oooOOO0ooOoOOO . setProperty ( "IsPlayable" , "true" )
  oooOOO0ooOoOOO . setPath ( url )
  if not o00o0o000Oo :
   xbmc . Player ( ) . play ( url )
  else :
   xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , oooOOO0ooOoOOO )
   if 62 - 62: o0o00Oo0O
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 41 - 41: ii1I - I11i11Ii
  if 48 - 48: I11i11Ii - ooO0OO000o / i11ii11iIi11i + I11i11Ii
def ooO ( link ) :
 IiII = urllib . urlopen ( link )
 i1iii1IiiiI1i1 = IiII . read ( )
 IiII . close ( )
 IIIiI1i1 = i1iii1IiiiI1i1 . split ( "Jetzt" )
 IIi11iII11i1 = IIIiI1i1 [ 1 ] . split ( 'programm/detail.php?const_id=' )
 ii11111I = IIi11iII11i1 [ 1 ] . split ( '<br /><a href="/' )
 OOOO = ii11111I [ 0 ] [ 40 : len ( ii11111I [ 0 ] ) ]
 oOOO000o0O0O = IIi11iII11i1 [ 2 ] . split ( "</a></p></div>" )
 ii1O0Ooo0O = oOOO000o0O0O [ 0 ] [ 17 : len ( oOOO000o0O0O [ 0 ] ) ]
 ii1O0Ooo0O = ii1O0Ooo0O . encode ( 'utf-8' )
 return "  - " + ii1O0Ooo0O + " - " + OOOO
 if 18 - 18: ii1I
 if 4 - 4: Oo0oO0ooo
def Iii1 ( url , regex ) :
 oO0Oo = o0O ( url )
 try :
  I1II1I11I1I = re . findall ( regex , oO0Oo ) [ 0 ]
  return I1II1I11I1I
 except :
  i1II1 ( 'regex failed' )
  i1II1 ( regex )
  return
  if 93 - 93: o0OO0 % ii1I
  if 83 - 83: I11i11Ii . i1iIi11iIIi1I - I1i1iI1i . IiiI
def ooo00o0o0 ( d , root = "root" , nested = 0 ) :
 if 54 - 54: o00ooo0 % I1i1iI1i . Oo0ooO0oo0oO + o0OO0 * o00 - ii1I
 I1ii1I1iii1 = lambda iIiiiIIiii : '<' + iIiiiIIiii + '>'
 OO0Oo00Oo = lambda iIiiiIIiii : '</' + iIiiiIIiii + '>\n'
 if 25 - 25: iI11I1II1I1I
 o0o0O0oOOOooo = lambda I1iii , Ii1iiI1i1 : Ii1iiI1i1 + I1ii1I1iii1 ( iIio0oooo0OOo00 ) + str ( I1iii ) + OO0Oo00Oo ( iIio0oooo0OOo00 )
 Ii1iiI1i1 = I1ii1I1iii1 ( root ) + '\n' if root else ""
 if 90 - 90: IiiI / Oo0ooO0oo0oO - Oo0ooO0oo0oO . I11i11Ii
 for iIio0oooo0OOo00 , o0OOoo0oOoO00 in d . iteritems ( ) :
  i1ii1iIi = type ( o0OOoo0oOoO00 )
  if nested == 0 : iIio0oooo0OOo00 = 'regex'
  if i1ii1iIi is list :
   for I1iii in o0OOoo0oOoO00 :
    I1iii = escape ( I1iii )
    Ii1iiI1i1 = o0o0O0oOOOooo ( I1iii , Ii1iiI1i1 )
    if 43 - 43: o00ooo0 + o00 + ii1I - oOoO0oo0OOOo + IiiI
  if i1ii1iIi is dict :
   Ii1iiI1i1 = o0o0O0oOOOooo ( '\n' + ooo00o0o0 ( o0OOoo0oOoO00 , None , nested + 1 ) , Ii1iiI1i1 )
  if i1ii1iIi is not list and i1ii1iIi is not dict :
   if not o0OOoo0oOoO00 is None : o0OOoo0oOoO00 = escape ( o0OOoo0oOoO00 )
   if 54 - 54: Iii1ii1II11i + Iii1ii1II11i + I1i1iI1i % ii1I % Ii
   if o0OOoo0oOoO00 is None :
    Ii1iiI1i1 = o0o0O0oOOOooo ( o0OOoo0oOoO00 , Ii1iiI1i1 )
   else :
    if 100 - 100: Iii1ii1II11i
    Ii1iiI1i1 = o0o0O0oOOOooo ( o0OOoo0oOoO00 . encode ( "utf-8" ) , Ii1iiI1i1 )
    if 96 - 96: I11i11Ii . Oo0oO0ooo * ooO0OO000o % Oo0oO0ooo . ooO00oOoo * ii1I
 Ii1iiI1i1 += OO0Oo00Oo ( root ) if root else ""
 if 83 - 83: iI11I1II1I1I
 return Ii1iiI1i1
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 97 - 97: Ii + i1iIi11iIIi1I * Oo0ooO0oo0oO % o00 . Oo0oO0ooo
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 4 - 4: o0o00Oo0O . o00 - iI11I1II1I1I
Ii11iiIIiI1 = IIIi ( )
if 19 - 19: Oo0ooO0oo0oO % i11ii11iIi11i / o00ooo0 + ooO0OO000o % ii
IiII = None
iiIiI = None
i1II1IiiIi = None
i1i1ii = None
Ii11 = None
OOO00O = iiii
i1i1ii = None
oOo000O00O0 = None
i1I = None
if 43 - 43: O0OOo
try :
 IiII = urllib . unquote_plus ( Ii11iiIIiI1 [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 iiIiI = urllib . unquote_plus ( Ii11iiIIiI1 [ "name" ] )
except :
 pass
try :
 Ii11 = urllib . unquote_plus ( Ii11iiIIiI1 [ "iconimage" ] )
except :
 pass
try :
 OOO00O = urllib . unquote_plus ( Ii11iiIIiI1 [ "fanart" ] )
except :
 pass
try :
 i1II1IiiIi = int ( Ii11iiIIiI1 [ "mode" ] )
except :
 pass
try :
 i1i1ii = eval ( urllib . unquote_plus ( Ii11iiIIiI1 [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 oOo000O00O0 = int ( Ii11iiIIiI1 [ "fav_mode" ] )
except :
 pass
try :
 i1I = Ii11iiIIiI1 [ "regexs" ]
except :
 pass
OoOiI11IiI1i1 = ''
try :
 OoOiI11IiI1i1 = urllib . unquote_plus ( Ii11iiIIiI1 [ "playitem" ] )
except :
 pass
 if 65 - 65: o0o00Oo0O . o0OO0
i1II1 ( "Mode: " + str ( i1II1IiiIi ) )
if 85 - 85: ooO0OO000o
if 55 - 55: Iii1ii1II11i
if not IiII is None :
 i1II1 ( "URL: " + str ( IiII . encode ( 'utf-8' ) ) )
i1II1 ( "Name: " + str ( iiIiI ) )
if 76 - 76: o0OO0 - Ii
if not OoOiI11IiI1i1 == '' :
 oOoO0o = o0o00OO0 ( '' , data = OoOiI11IiI1i1 )
 iiIiI , IiII , i1I = i1i ( oOoO0o , None , dontLink = True )
 i1II1IiiIi = 117
 if 27 - 27: Iii1ii1II11i - Ii % ooO00oOoo / i1iIi11iIIi1I . i1iIi11iIIi1I / ii
if i1II1IiiIi == None :
 i1II1 ( "getSources" )
 OOoOO00OOO0OO ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 76 - 76: I1i1iI1i * i11ii11iIi11i . iI11I1II1I1I % ii % Iii1ii1II11i
elif i1II1IiiIi == 1 :
 i1II1 ( "getData" )
 oO0Oo = None
 if i1I :
  oO0Oo = iII111i ( i1I , IiII )
  IiII = ''
  if 39 - 39: ooO0OO000o * oOoO0oo0OOOo . o0o00Oo0O * I1i1iI1i
 i1 ( IiII , OOO00O , oO0Oo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 89 - 89: o00ooo0 - O0OOo . I1i1iI1i - ooO00oOoo - I11i11Ii
elif i1II1IiiIi == 2 :
 i1II1 ( "getChannelItems" )
 O0OO ( iiIiI , IiII , OOO00O )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 79 - 79: Oo0oO0ooo + Oo0oO0ooo + o00ooo0
elif i1II1IiiIi == 3 :
 i1II1 ( "getSubChannelItems" )
 o0oooOO00 ( iiIiI , IiII , OOO00O )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 39 - 39: o0o00Oo0O - ii
elif i1II1IiiIi == 4 :
 i1II1 ( "getFavorites" )
 ii11 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 63 - 63: iI11I1II1I1I % IiiI * O0OOo
elif i1II1IiiIi == 5 :
 i1II1 ( "addFavorite" )
 try :
  iiIiI = iiIiI . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iiIiI = iiIiI . split ( '  - ' ) [ 0 ]
 except :
  pass
 Iii11111iiI ( iiIiI , IiII , Ii11 , OOO00O , oOo000O00O0 )
 if 79 - 79: o0o00Oo0O
elif i1II1IiiIi == 6 :
 i1II1 ( "rmFavorite" )
 try :
  iiIiI = iiIiI . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iiIiI = iiIiI . split ( '  - ' ) [ 0 ]
 except :
  pass
 i1iIii ( iiIiI )
 if 32 - 32: ooO0OO000o . o0o00Oo0O + o00ooo0 / oOoO0oo0OOOo / Oo0oO0ooo / Oo0ooO0oo0oO
elif i1II1IiiIi == 7 :
 iI111iI ( )
 o000o0o00o0Oo ( )
 if 15 - 15: Iii1ii1II11i
elif i1II1IiiIi == 8 :
 i1II1 ( "rmSource" )
 i1iIi ( iiIiI )
 if 4 - 4: Oo0oO0ooo + iI11I1II1I1I * o00 + i1iIi11iIIi1I * IiiI % ooO0OO000o
elif i1II1IiiIi == 9 :
 i1II1 ( "download_file" )
 ii1IIii ( iiIiI , IiII )
 if 88 - 88: o0OO0 - ii1I % Ii % ooO0OO000o * ii
elif i1II1IiiIi == 10 :
 i1II1 ( "getCommunitySources" )
 oOOO ( )
 if 40 - 40: i1iIi11iIIi1I
elif i1II1IiiIi == 11 :
 i1II1 ( "addSource" )
 OO0oOoOO0oOO0 ( IiII )
 if 47 - 47: oOoO0oo0OOOo
elif i1II1IiiIi == 12 :
 i1II1 ( "setResolvedUrl" )
 if not IiII . startswith ( "plugin://plugin" ) or not any ( x in IiII for x in II ) :
  o00o0o000Oo = True
  if '$$LSDirect$$' in IiII :
   IiII = IiII . replace ( '$$LSDirect$$' , '' )
   o00o0o000Oo = False
  I1II1I11I1I = xbmcgui . ListItem ( path = IiII )
  if not o00o0o000Oo :
   xbmc . Player ( ) . play ( IiII )
  else :
   xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , I1II1I11I1I )
 else :
  if 65 - 65: o0o00Oo0O + ooO00oOoo % o00ooo0 * I11i11Ii / O0OOo / oOoO0oo0OOOo
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + IiII + ')' )
  if 71 - 71: Ii / oOoO0oo0OOOo . o0OO0
elif i1II1IiiIi == 13 :
 i1II1 ( "play_playlist" )
 i1i1iIII11i ( iiIiI , i1i1ii )
 if 33 - 33: o0OO0
elif i1II1IiiIi == 14 :
 i1II1 ( "get_xml_database" )
 ooOOOoOooOoO ( IiII )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 39 - 39: i11ii11iIi11i + o0o00Oo0O + O0OOo * ooO0OO000o % o0o00Oo0O - o0o00Oo0O
elif i1II1IiiIi == 15 :
 i1II1 ( "browse_xml_database" )
 ooOOOoOooOoO ( IiII , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 41 - 41: Oo0oO0ooo % IiiI
elif i1II1IiiIi == 16 :
 i1II1 ( "browse_community" )
 oOOO ( IiII , browse = True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 67 - 67: o0o00Oo0O % ooO00oOoo
elif i1II1IiiIi == 17 or i1II1IiiIi == 117 :
 i1II1 ( "getRegexParsed" )
 if 35 - 35: I11i11Ii . oOoO0oo0OOOo + ii % i1iIi11iIIi1I % Oo0ooO0oo0oO
 oO0Oo = None
 if i1I and 'listrepeat' in urllib . unquote_plus ( i1I ) :
  I11I1IIiiII1 , IIIIIii1ii11 , iIIIii , i1I = iII111i ( i1I , IiII )
  if 39 - 39: o00ooo0
  iII = ''
  if 60 - 60: Oo0ooO0oo0oO
  if 62 - 62: ooO00oOoo * I1i1iI1i
  oOo = iIIIii [ 'name' ]
  oOOoO0oO0oo0O = i1I . pop ( oOo )
  if 55 - 55: i1iIi11iIIi1I
  IiII = ''
  import copy
  IIi1i1I11IIII = ''
  OooOoOOO00O = 0
  for I111iIIII11iI in IIIIIii1ii11 :
   try :
    OooOoOOO00O += 1
    oOoOO = copy . deepcopy ( i1I )
    if 20 - 20: O0OOo . i11ii11iIi11i * o00
    OOii11Ii1IiiI1 = I11I1IIiiII1
    ooOooo000oOO = 0
    for ooOooo000oOO in range ( len ( I111iIIII11iI ) ) :
     if 83 - 83: O0OOo + ii1I * ii * o0OO0
     if len ( oOoOO ) > 0 :
      for OoO0o0OO , II11IiI1 in oOoOO . iteritems ( ) :
       if II11IiI1 is not None :
        for iIIi11i , III in II11IiI1 . iteritems ( ) :
         if III is not None :
          if 36 - 36: ooO0OO000o * IiiI
          if 25 - 25: o00ooo0 % ooO0OO000o - o0OO0 * Iii1ii1II11i - iI11I1II1I1I
          if 46 - 46: ooO0OO000o . o0o00Oo0O * i1iIi11iIIi1I + o00
          if 40 - 40: o0o00Oo0O . o0o00Oo0O * Oo0ooO0oo0oO
          if type ( III ) is dict :
           for i1iiiIIi11II , o0oooOo0oo in III . iteritems ( ) :
            if o0oooOo0oo is not None :
             IIiiii = None
             if isinstance ( I111iIIII11iI , tuple ) :
              try :
               IIiiii = I111iIIII11iI [ ooOooo000oOO ] . decode ( 'utf-8' )
              except :
               IIiiii = I111iIIII11iI [ ooOooo000oOO ]
             else :
              try :
               IIiiii = I111iIIII11iI . decode ( 'utf-8' )
              except :
               IIiiii = I111iIIII11iI
               if 33 - 33: ooO00oOoo % ooO0OO000o
             if '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + '][DE]' in o0oooOo0oo :
              o0oooOo0oo = o0oooOo0oo . replace ( '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + '][DE]' , unescape ( IIiiii ) )
             III [ i1iiiIIi11II ] = o0oooOo0oo . replace ( '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + ']' , IIiiii )
             if 49 - 49: Iii1ii1II11i + I1i1iI1i / IiiI + ii + Oo0ooO0oo0oO / Oo0oO0ooo
             if 29 - 29: o00ooo0 - o00ooo0 / O0OOo
          else :
           IIiiii = None
           if isinstance ( I111iIIII11iI , tuple ) :
            try :
             IIiiii = I111iIIII11iI [ ooOooo000oOO ] . decode ( 'utf-8' )
            except :
             IIiiii = I111iIIII11iI [ ooOooo000oOO ]
           else :
            try :
             IIiiii = I111iIIII11iI . decode ( 'utf-8' )
            except :
             IIiiii = I111iIIII11iI
           if '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + '][DE]' in III :
            if 49 - 49: I1i1iI1i + o0OO0 % i11ii11iIi11i - i1iIi11iIIi1I - o0o00Oo0O - ii
            III = III . replace ( '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + '][DE]' , unescape ( IIiiii ) )
            if 4 - 4: ooO0OO000o - o0OO0 % i1iIi11iIIi1I * Ii
           II11IiI1 [ iIIi11i ] = III . replace ( '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + ']' , IIiiii )
           if 18 - 18: i1iIi11iIIi1I % o0o00Oo0O
           if 66 - 66: iI11I1II1I1I % Ii / I11i11Ii
     IIiiii = None
     if isinstance ( I111iIIII11iI , tuple ) :
      try :
       IIiiii = I111iIIII11iI [ ooOooo000oOO ] . decode ( 'utf-8' )
      except :
       IIiiii = I111iIIII11iI [ ooOooo000oOO ]
     else :
      try :
       IIiiii = I111iIIII11iI . decode ( 'utf-8' )
      except :
       IIiiii = I111iIIII11iI
     if '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + '][DE]' in OOii11Ii1IiiI1 :
      OOii11Ii1IiiI1 = OOii11Ii1IiiI1 . replace ( '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + '][DE]' , IIiiii )
     OOii11Ii1IiiI1 = OOii11Ii1IiiI1 . replace ( '[' + oOo + '.param' + str ( ooOooo000oOO + 1 ) + ']' , escape ( IIiiii ) )
     if 47 - 47: Iii1ii1II11i * o0OO0 + iI11I1II1I1I - o0OO0 / Oo0oO0ooo
    OOii11Ii1IiiI1 = OOii11Ii1IiiI1 . replace ( '[' + oOo + '.param' + str ( 0 ) + ']' , str ( OooOoOOO00O ) )
    if 86 - 86: Oo0oO0ooo
    if 43 - 43: I11i11Ii / o00 / O0OOo + iI11I1II1I1I + ii
    if 33 - 33: ooO0OO000o - Oo0oO0ooo - O0OOo
    if 92 - 92: i11ii11iIi11i * Oo0oO0ooo
    ooo00o0OO = ''
    if 32 - 32: Oo0ooO0oo0oO + o00 + iI11I1II1I1I * i1iIi11iIIi1I
    if len ( oOoOO ) > 0 :
     ooo00o0OO = ooo00o0o0 ( oOoOO , 'lsproroot' )
     ooo00o0OO = ooo00o0OO . split ( '<lsproroot>' ) [ 1 ] . split ( '</lsproroot' ) [ 0 ]
     if 62 - 62: Ii
     if 2 - 2: I11i11Ii
    try :
     IIi1i1I11IIII += '\n<item>%s\n%s</item>' % ( OOii11Ii1IiiI1 , ooo00o0OO )
    except : IIi1i1I11IIII += '\n<item>%s\n%s</item>' % ( OOii11Ii1IiiI1 . encode ( "utf-8" ) , ooo00o0OO )
   except : traceback . print_exc ( file = sys . stdout )
   if 69 - 69: ii / i1iIi11iIIi1I * ooO00oOoo
   if 99 - 99: ooO0OO000o * iI11I1II1I1I % o0o00Oo0O * o0OO0 / ooO0OO000o % ii
   if 14 - 14: Oo0oO0ooo . Oo0oO0ooo % O0OOo
   if 42 - 42: IiiI . Oo0ooO0oo0oO - O0OOo
   if 33 - 33: ooO0OO000o / o0o00Oo0O / Oo0oO0ooo - I1i1iI1i - ii1I
  i1II1 ( repr ( IIi1i1I11IIII ) )
  i1 ( '' , '' , IIi1i1I11IIII )
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 else :
  IiII , Oo000ooOOO = iII111i ( i1I , IiII )
  if 8 - 8: Ii . o00 / iI11I1II1I1I / Iii1ii1II11i / Oo0oO0ooo - o00ooo0
  if IiII :
   if '$PLAYERPROXY$=' in IiII :
    IiII , OO00 = IiII . split ( '$PLAYERPROXY$=' )
    print 'proxy' , OO00
    if 32 - 32: IiiI . ii1I * i1iIi11iIIi1I
    O0oooo0O = None
    Ii1iiIIi1i = None
    if len ( OO00 ) > 0 and '@' in OO00 :
     OO00 = OO00 . split ( ':' )
     O0oooo0O = OO00 [ 0 ]
     Ii1iiIIi1i = OO00 [ 1 ] . split ( '@' ) [ 0 ]
     iIiiiI1I = OO00 [ 1 ] . split ( '@' ) [ 1 ]
     iIII1I1ii = OO00 [ 2 ]
    else :
     iIiiiI1I , iIII1I1ii = OO00 . split ( ':' )
     if 4 - 4: iI11I1II1I1I . ii1I
    IIIIIiII1 ( IiII , iiIiI , Ii11 , iIiiiI1I , iIII1I1ii , O0oooo0O , Ii1iiIIi1i )
   else :
    oO0oo ( IiII , iiIiI , Ii11 , Oo000ooOOO )
  else :
   xbmc . executebuiltin ( "XBMC.Notification(goldentv,Failed to extract regex. - " + "this" + ",4000," + i1iiI11I + ")" )
   if 63 - 63: iI11I1II1I1I + Oo0oO0ooo % ii1I / I11i11Ii % ooO0OO000o
elif i1II1IiiIi == 18 :
 i1II1 ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(goldentv,Please [COLOR yellow]install Youtube-dl[/COLOR] module ,10000," ")" )
 oOo0O = youtubedl . single_YD ( IiII )
 oO0oo ( oOo0O , iiIiI , Ii11 )
 if 60 - 60: IiiI . oOoO0oo0OOOo % ooO00oOoo / I11i11Ii / o0o00Oo0O
elif i1II1IiiIi == 19 :
 i1II1 ( "Genesiscommonresolvers" )
 oO0oo ( iii1 ( IiII ) , iiIiI , Ii11 , True )
 if 19 - 19: Ii . I11i11Ii + ooO0OO000o / Oo0ooO0oo0oO . Iii1ii1II11i * O0OOo
elif i1II1IiiIi == 21 :
 i1II1 ( "download current file using youtube-dl service" )
 I11oO0oo ( '' , iiIiI , 'video' )
 if 59 - 59: iI11I1II1I1I / Iii1ii1II11i % O0OOo
elif i1II1IiiIi == 23 :
 i1II1 ( "get info then download" )
 I11oO0oo ( IiII , iiIiI , 'video' )
 if 84 - 84: iI11I1II1I1I / I11i11Ii . oOoO0oo0OOOo % I1i1iI1i
elif i1II1IiiIi == 24 :
 i1II1 ( "Audio only youtube download" )
 I11oO0oo ( IiII , iiIiI , 'audio' )
 if 99 - 99: i1iIi11iIIi1I + Ii
elif i1II1IiiIi == 25 :
 i1II1 ( "Searchin Other plugins" )
 OOoO0o ( IiII , iiIiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 36 - 36: o00ooo0 * ooO00oOoo * iI11I1II1I1I - I1i1iI1i % Ii
elif i1II1IiiIi == 55 :
 i1II1 ( "enabled lock" )
 OOOoOooO000oO = O00 . getSetting ( 'parentalblockedpin' )
 o0o = xbmc . Keyboard ( '' , 'Enter Pin' )
 o0o . doModal ( )
 if not ( o0o . isConfirmed ( ) == False ) :
  o00OooOO000 = o0o . getText ( )
  if o00OooOO000 == OOOoOooO000oO :
   O00 . setSetting ( 'parentalblocked' , "false" )
   xbmc . executebuiltin ( "XBMC.Notification(goldentv,Parental Block Disabled,5000," + i1iiI11I + ")" )
  else :
   xbmc . executebuiltin ( "XBMC.Notification(goldentv,Wrong Pin??,5000," + i1iiI11I + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 98 - 98: iI11I1II1I1I - ii1I + O0OOo % I1i1iI1i + O0OOo / o0OO0
elif i1II1IiiIi == 56 :
 i1II1 ( "disable lock" )
 O00 . setSetting ( 'parentalblocked' , "true" )
 xbmc . executebuiltin ( "XBMC.Notification(goldentv,Parental block enabled,5000," + i1iiI11I + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 97 - 97: Oo0oO0ooo % O0OOo + ooO0OO000o - Oo0oO0ooo % i11ii11iIi11i + O0OOo
elif i1II1IiiIi == 53 :
 i1II1 ( "Requesting JSON-RPC Items" )
 I1II1IiI1 ( IiII )
 if 31 - 31: IiiI
 if 35 - 35: oOoO0oo0OOOo + o00ooo0 * O0OOo / oOoO0oo0OOOo
if not oo000 == None :
 print 'setting view mode'
 xbmc . executebuiltin ( "Container.SetViewMode(%s)" % oo000 )
 if 69 - 69: O0OOo . Oo0ooO0oo0oO - I11i11Ii
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')